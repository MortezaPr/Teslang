
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AS BEGIN BOOLEAN DBL_COLON DIVIDE ELSE ELSEIF END EQ EXIT FALSE FN FOR GREATER_THAN ID IF INT LCURLYEBR LENGTH LESS_THAN LIST LPAREN LSQUAREBR MINUS NUMBER PLUS PRINT RCURLYEBR RETURN RPAREN RSQUAREBR SCAN SEMI_COLON STRING TIMES TO TRUE VECTOR WHILEprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : assignment_statement\n                     | print_statementassignment_statement : ID EQ expression SEMI_COLONprint_statement : PRINT LPAREN expression RPAREN SEMI_COLONexpression : expression PLUS expression\n                      | expression MINUS expression\n                      | expression TIMES expression\n                      | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'ID':([0,2,3,4,5,8,9,10,13,16,17,18,19,20,28,],[6,6,-2,-4,-5,-3,11,11,11,-6,11,11,11,11,-7,]),'PRINT':([0,2,3,4,5,8,16,28,],[7,7,-2,-4,-5,-3,-6,-7,]),'$end':([1,2,3,4,5,8,16,28,],[0,-1,-2,-4,-5,-3,-6,-7,]),'EQ':([6,],[9,]),'LPAREN':([7,9,10,13,17,18,19,20,],[10,13,13,13,13,13,13,13,]),'NUMBER':([9,10,13,17,18,19,20,],[14,14,14,14,14,14,14,]),'SEMI_COLON':([11,12,14,22,23,24,25,26,27,],[-14,16,-13,28,-8,-9,-10,-11,-12,]),'PLUS':([11,12,14,15,21,23,24,25,26,27,],[-14,17,-13,17,17,17,17,17,17,-12,]),'MINUS':([11,12,14,15,21,23,24,25,26,27,],[-14,18,-13,18,18,18,18,18,18,-12,]),'TIMES':([11,12,14,15,21,23,24,25,26,27,],[-14,19,-13,19,19,19,19,19,19,-12,]),'DIVIDE':([11,12,14,15,21,23,24,25,26,27,],[-14,20,-13,20,20,20,20,20,20,-12,]),'RPAREN':([11,14,15,21,23,24,25,26,27,],[-14,-13,22,27,-8,-9,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,8,]),'assignment_statement':([0,2,],[4,4,]),'print_statement':([0,2,],[5,5,]),'expression':([9,10,13,17,18,19,20,],[12,15,21,23,24,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','grammar.py',19),
  ('statement_list -> statement','statement_list',1,'p_statement_list','grammar.py',23),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',24),
  ('statement -> assignment_statement','statement',1,'p_statement','grammar.py',31),
  ('statement -> print_statement','statement',1,'p_statement','grammar.py',32),
  ('assignment_statement -> ID EQ expression SEMI_COLON','assignment_statement',4,'p_assignment_statement','grammar.py',36),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMI_COLON','print_statement',5,'p_print_statement','grammar.py',40),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','grammar.py',44),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','grammar.py',45),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','grammar.py',46),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','grammar.py',47),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','grammar.py',51),
  ('expression -> NUMBER','expression',1,'p_expression_number','grammar.py',55),
  ('expression -> ID','expression',1,'p_expression_id','grammar.py',59),
]
