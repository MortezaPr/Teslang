
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BEGIN BOOLEAN COLON COMMA DBL_COLON DIVIDE DO DOUBLE_EQ DOUBLE_LSQUAREBR DOUBLE_RSQUAREBR ELSE ELSEIF END EQ EXIT FALSE FN FOR GREATER_THAN GREATER_THAN_EQ ID IF INT LCURLYEBR LENGTH LESS_THAN LESS_THAN_EQ LIST LPAREN LSQUAREBR MINUS NOT NOT_EQ NULL NUMBER OR PLUS PRINT QUESTION_MARK RCURLYEBR RETURN RPAREN RSQUAREBR SCAN SEMI_COLON STRING TIMES TO TRUE VECTOR WHILEprog : empty\n        | func progfunc : func1\n        | func2empty :stmt : expr SEMI_COLON\n        | defvar SEMI_COLON\n        | func SEMI_COLON\n        | single_if\n        | else_if\n        | while_loop\n        | for_loop\n        | do_while\n        | return_is SEMI_COLON\n        | blockbody : empty\n        | stmt bodyreturn_is : RETURN exprwhile_loop : WHILE LPAREN expr RPAREN stmtfor_loop : FOR LPAREN ID EQ expr TO expr RPAREN stmtdo_while : DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBRblock : BEGIN body ENDsingle_if : IF DOUBLE_LSQUAREBR  expr DOUBLE_RSQUAREBR stmtelse_if : IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmtdefvar : ID DBL_COLON type\n        | ID DBL_COLON type EQ exprtype : INT\n        | STRING\n        | VECTOR\n        | NULL\n        | BOOLEANfunc1 : FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBRfunc2 :  FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_isflist : empty\n        | ID AS type\n        | ID  AS type COMMA flistclist : empty\n        | expr\n        | expr COMMA clistexpr : on_list\n        | expr_list\n        | ternary_expr\n        | binary_expr\n        | ID\n        | assignment\n        | function_call\n        | NUMBER\n        | STRINGassignment : ID EQ expron_list : expr LSQUAREBR expr RSQUAREBRexpr_list : LSQUAREBR clist RSQUAREBRternary_expr : expr QUESTION_MARK expr COLON exprfunction_call : ID LPAREN clist RPARENbinary_expr :  expr PLUS expr\n        | expr MINUS expr\n        | expr TIMES expr\n        | expr DIVIDE expr\n        | expr GREATER_THAN expr\n        | expr LESS_THAN expr\n        | expr DOUBLE_EQ expr\n        | expr GREATER_THAN_EQ expr\n        | expr LESS_THAN_EQ expr\n        | expr NOT_EQ expr\n        | expr AND expr\n        | expr OR expr\n        | NOT expr\n        | PLUS expr\n        | MINUS exprbuiltin_methods : SCAN LPAREN RPAREN\n        | PRINT LPAREN clist RPAREN\n        | LENGTH LPAREN clist RPAREN\n        | EXIT LPAREN clist RPARENsingle_if : IF LCURLYEBR error RCURLYEBR stmtwhile_loop : WHILE LPAREN error RPAREN stmtfunc1_rtype : FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBRfunc2_rtype :  FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN EQ GREATER_THAN return_isfunc_flist : FN ID LPAREN error RPAREN  LCURLYEBR body RCURLYEBRelse_if : IF DOUBLE_LSQUAREBR error DOUBLE_RSQUAREBR stmt ELSE stmtfor_loop : FOR LPAREN ID EQ error TO expr RPAREN stmt\n        | FOR LPAREN ID EQ expr TO error RPAREN stmt\n        | FOR LPAREN ID EQ error TO error RPAREN stmtdefvar_type : ID DBL_COLON error\n        | ID DBL_COLON error EQ exprflist : ID AS error\n        | ID AS error COMMA flistflist : error AS type\n        | error AS type COMMA flistflist : ID AS type COMMA error'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,7,51,52,53,54,55,56,57,58,73,98,99,104,105,106,107,109,113,114,115,116,117,118,119,120,121,122,123,124,133,136,137,148,],[-5,0,-1,-5,-3,-4,-2,-40,-41,-42,-43,-45,-46,-47,-48,-32,-18,-44,-67,-68,-66,-33,-49,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-51,-53,-50,-52,]),'FN':([0,3,4,5,35,40,44,45,46,47,48,50,51,52,53,54,55,56,57,58,62,64,73,75,90,91,92,98,99,104,105,106,107,109,113,114,115,116,117,118,119,120,121,122,123,124,132,133,136,137,139,140,141,142,143,148,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[6,6,-3,-4,6,6,-9,-10,-11,-12,-13,-15,-40,-41,-42,-43,-45,-46,-47,-48,6,6,-32,-6,-7,-8,-14,-18,-44,-67,-68,-66,-33,-49,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-22,-51,-53,-50,6,6,6,6,6,-52,-23,-73,-19,-74,6,6,-21,-24,-78,6,6,6,6,-20,-80,-81,-79,]),'SEMI_COLON':([4,5,19,20,21,22,23,37,41,42,43,49,51,52,53,54,55,56,57,58,73,98,99,104,105,106,107,108,109,113,114,115,116,117,118,119,120,121,122,123,124,133,136,137,147,148,],[-3,-4,-27,-28,-29,-30,-31,-44,75,90,91,92,-40,-41,-42,-43,-45,-46,-47,-48,-32,-18,-44,-67,-68,-66,-33,-25,-49,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-51,-53,-50,-26,-52,]),'ID':([6,9,26,27,29,35,40,44,45,46,47,48,50,62,63,64,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,132,134,135,138,139,140,141,142,143,144,145,149,151,152,153,157,158,159,160,161,162,163,168,169,170,171,172,173,174,175,],[8,10,10,10,10,37,37,-9,-10,-11,-12,-13,-15,37,99,37,99,99,99,99,99,99,-6,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-7,-8,-14,99,99,130,-22,99,99,99,37,37,37,37,37,99,99,-23,-73,-19,-74,37,37,99,99,-21,-24,-78,37,37,37,37,-20,-80,-81,-79,]),'LPAREN':([8,37,60,61,99,],[9,72,95,96,72,]),'error':([9,14,26,27,29,93,94,95,144,159,160,],[13,18,31,13,13,126,127,129,155,165,166,]),'RPAREN':([9,11,12,17,18,19,20,21,22,23,25,26,27,29,30,31,32,34,51,52,53,54,55,56,57,58,72,99,102,103,104,105,106,109,110,113,114,115,116,117,118,119,120,121,122,123,124,128,129,133,134,136,137,146,148,164,165,166,167,],[-5,15,-34,-35,-84,-27,-28,-29,-30,-31,-86,-5,-5,-5,-36,-88,-85,-87,-40,-41,-42,-43,-45,-46,-47,-48,-5,-44,-37,-38,-67,-68,-66,-49,136,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,142,143,-51,-5,-53,-50,-39,-52,168,169,170,171,]),'AS':([10,13,31,],[14,16,16,]),'INT':([14,16,24,70,],[19,19,19,19,]),'STRING':([14,16,24,35,40,44,45,46,47,48,50,62,63,64,65,66,67,68,70,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,132,134,135,138,139,140,141,142,143,144,145,149,151,152,153,157,158,159,160,161,162,163,168,169,170,171,172,173,174,175,],[20,20,20,58,58,-9,-10,-11,-12,-13,-15,58,58,58,58,58,58,58,20,58,58,-6,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-7,-8,-14,58,58,-22,58,58,58,58,58,58,58,58,58,58,-23,-73,-19,-74,58,58,58,58,-21,-24,-78,58,58,58,58,-20,-80,-81,-79,]),'VECTOR':([14,16,24,70,],[21,21,21,21,]),'NULL':([14,16,24,70,],[22,22,22,22,]),'BOOLEAN':([14,16,24,70,],[23,23,23,23,]),'LESS_THAN':([15,37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[24,-44,83,-40,-41,-42,-43,-45,-46,-47,-48,83,-44,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-51,-53,-50,83,83,83,83,83,83,]),'COMMA':([17,18,19,20,21,22,23,25,51,52,53,54,55,56,57,58,99,103,104,105,106,109,113,114,115,116,117,118,119,120,121,122,123,124,133,136,137,148,],[26,27,-27,-28,-29,-30,-31,29,-40,-41,-42,-43,-45,-46,-47,-48,-44,134,-67,-68,-66,-49,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-51,-53,-50,-52,]),'GREATER_THAN':([19,20,21,22,23,28,36,37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-27,-28,-29,-30,-31,33,69,-44,82,-40,-41,-42,-43,-45,-46,-47,-48,82,-44,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-51,-53,-50,82,82,82,82,82,82,]),'EQ':([19,20,21,22,23,33,37,99,108,130,],[-27,-28,-29,-30,-31,36,71,71,135,144,]),'LCURLYEBR':([33,59,],[35,94,]),'RCURLYEBR':([35,38,39,40,44,45,46,47,48,50,74,75,90,91,92,127,132,149,151,152,153,161,162,163,172,173,174,175,],[-5,73,-16,-5,-9,-10,-11,-12,-13,-15,-17,-6,-7,-8,-14,141,-22,-23,-73,-19,-74,-21,-24,-78,-20,-80,-81,-79,]),'NUMBER':([35,40,44,45,46,47,48,50,62,63,64,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,132,134,135,138,139,140,141,142,143,144,145,149,151,152,153,157,158,159,160,161,162,163,168,169,170,171,172,173,174,175,],[57,57,-9,-10,-11,-12,-13,-15,57,57,57,57,57,57,57,57,57,-6,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-7,-8,-14,57,57,-22,57,57,57,57,57,57,57,57,57,57,-23,-73,-19,-74,57,57,57,57,-21,-24,-78,57,57,57,57,-20,-80,-81,-79,]),'IF':([35,40,44,45,46,47,48,50,62,64,75,90,91,92,132,139,140,141,142,143,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[59,59,-9,-10,-11,-12,-13,-15,59,59,-6,-7,-8,-14,-22,59,59,59,59,59,-23,-73,-19,-74,59,59,-21,-24,-78,59,59,59,59,-20,-80,-81,-79,]),'WHILE':([35,40,44,45,46,47,48,50,62,64,75,90,91,92,97,132,139,140,141,142,143,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[60,60,-9,-10,-11,-12,-13,-15,60,60,-6,-7,-8,-14,131,-22,60,60,60,60,60,-23,-73,-19,-74,60,60,-21,-24,-78,60,60,60,60,-20,-80,-81,-79,]),'FOR':([35,40,44,45,46,47,48,50,62,64,75,90,91,92,132,139,140,141,142,143,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[61,61,-9,-10,-11,-12,-13,-15,61,61,-6,-7,-8,-14,-22,61,61,61,61,61,-23,-73,-19,-74,61,61,-21,-24,-78,61,61,61,61,-20,-80,-81,-79,]),'DO':([35,40,44,45,46,47,48,50,62,64,75,90,91,92,132,139,140,141,142,143,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[62,62,-9,-10,-11,-12,-13,-15,62,62,-6,-7,-8,-14,-22,62,62,62,62,62,-23,-73,-19,-74,62,62,-21,-24,-78,62,62,62,62,-20,-80,-81,-79,]),'RETURN':([35,40,44,45,46,47,48,50,62,64,69,75,90,91,92,132,139,140,141,142,143,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[63,63,-9,-10,-11,-12,-13,-15,63,63,63,-6,-7,-8,-14,-22,63,63,63,63,63,-23,-73,-19,-74,63,63,-21,-24,-78,63,63,63,63,-20,-80,-81,-79,]),'BEGIN':([35,40,44,45,46,47,48,50,62,64,75,90,91,92,132,139,140,141,142,143,149,151,152,153,157,158,161,162,163,168,169,170,171,172,173,174,175,],[64,64,-9,-10,-11,-12,-13,-15,64,64,-6,-7,-8,-14,-22,64,64,64,64,64,-23,-73,-19,-74,64,64,-21,-24,-78,64,64,64,64,-20,-80,-81,-79,]),'LSQUAREBR':([35,37,40,41,44,45,46,47,48,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,151,152,153,154,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,],[65,-44,65,76,-9,-10,-11,-12,-13,-15,-40,-41,-42,-43,-45,-46,-47,-48,65,65,65,65,65,65,65,65,65,-6,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-7,-8,-14,65,65,76,-44,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-22,-51,65,65,-53,-50,65,65,65,65,65,65,65,65,76,76,-23,-73,-19,-74,76,76,65,65,65,65,-21,-24,-78,76,76,65,65,65,65,-20,-80,-81,-79,]),'NOT':([35,40,44,45,46,47,48,50,62,63,64,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,132,134,135,138,139,140,141,142,143,144,145,149,151,152,153,157,158,159,160,161,162,163,168,169,170,171,172,173,174,175,],[68,68,-9,-10,-11,-12,-13,-15,68,68,68,68,68,68,68,68,68,-6,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-7,-8,-14,68,68,-22,68,68,68,68,68,68,68,68,68,68,-23,-73,-19,-74,68,68,68,68,-21,-24,-78,68,68,68,68,-20,-80,-81,-79,]),'PLUS':([35,37,40,41,44,45,46,47,48,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,151,152,153,154,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,],[66,-44,66,78,-9,-10,-11,-12,-13,-15,-40,-41,-42,-43,-45,-46,-47,-48,66,66,66,66,66,66,66,66,66,-6,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-7,-8,-14,66,66,78,-44,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-22,-51,66,66,-53,-50,66,66,66,66,66,66,66,66,78,78,-23,-73,-19,-74,78,78,66,66,66,66,-21,-24,-78,78,78,66,66,66,66,-20,-80,-81,-79,]),'MINUS':([35,37,40,41,44,45,46,47,48,50,51,52,53,54,55,56,57,58,62,63,64,65,66,67,68,71,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,149,151,152,153,154,156,157,158,159,160,161,162,163,164,167,168,169,170,171,172,173,174,175,],[67,-44,67,79,-9,-10,-11,-12,-13,-15,-40,-41,-42,-43,-45,-46,-47,-48,67,67,67,67,67,67,67,67,67,-6,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-7,-8,-14,67,67,79,-44,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-22,-51,67,67,-53,-50,67,67,67,67,67,67,67,67,79,79,-23,-73,-19,-74,79,79,67,67,67,67,-21,-24,-78,79,79,67,67,67,67,-20,-80,-81,-79,]),'QUESTION_MARK':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,77,-40,-41,-42,-43,-45,-46,-47,-48,77,-44,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-51,-53,-50,77,77,77,77,77,77,]),'TIMES':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,80,-40,-41,-42,-43,-45,-46,-47,-48,80,-44,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-51,-53,-50,80,80,80,80,80,80,]),'DIVIDE':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,81,-40,-41,-42,-43,-45,-46,-47,-48,81,-44,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-51,-53,-50,81,81,81,81,81,81,]),'DOUBLE_EQ':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,84,-40,-41,-42,-43,-45,-46,-47,-48,84,-44,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-51,-53,-50,84,84,84,84,84,84,]),'GREATER_THAN_EQ':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,85,-40,-41,-42,-43,-45,-46,-47,-48,85,-44,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-51,-53,-50,85,85,85,85,85,85,]),'LESS_THAN_EQ':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,86,-40,-41,-42,-43,-45,-46,-47,-48,86,-44,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-51,-53,-50,86,86,86,86,86,86,]),'NOT_EQ':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,87,-40,-41,-42,-43,-45,-46,-47,-48,87,-44,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-51,-53,-50,87,87,87,87,87,87,]),'AND':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,88,-40,-41,-42,-43,-45,-46,-47,-48,88,-44,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-51,-53,-50,88,88,88,88,88,88,]),'OR':([37,41,51,52,53,54,55,56,57,58,98,99,103,104,105,106,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,133,136,137,147,148,154,156,164,167,],[-44,89,-40,-41,-42,-43,-45,-46,-47,-48,89,-44,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-51,-53,-50,89,89,89,89,89,89,]),'DBL_COLON':([37,],[70,]),'END':([39,40,44,45,46,47,48,50,64,74,75,90,91,92,100,132,149,151,152,153,161,162,163,172,173,174,175,],[-16,-5,-9,-10,-11,-12,-13,-15,-5,-17,-6,-7,-8,-14,132,-22,-23,-73,-19,-74,-21,-24,-78,-20,-80,-81,-79,]),'ELSE':([44,45,46,47,48,50,75,90,91,92,132,149,150,151,152,153,161,162,163,172,173,174,175,],[-9,-10,-11,-12,-13,-15,-6,-7,-8,-14,-22,157,158,-73,-19,-74,-21,-24,-78,-20,-80,-81,-79,]),'RSQUAREBR':([51,52,53,54,55,56,57,58,65,99,101,102,103,104,105,106,109,111,113,114,115,116,117,118,119,120,121,122,123,124,133,134,136,137,146,148,],[-40,-41,-42,-43,-45,-46,-47,-48,-5,-44,133,-37,-38,-67,-68,-66,-49,137,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-51,-5,-53,-50,-39,-52,]),'COLON':([51,52,53,54,55,56,57,58,99,104,105,106,109,112,113,114,115,116,117,118,119,120,121,122,123,124,133,136,137,148,],[-40,-41,-42,-43,-45,-46,-47,-48,-44,-67,-68,-66,-49,138,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-51,-53,-50,-52,]),'DOUBLE_RSQUAREBR':([51,52,53,54,55,56,57,58,99,104,105,106,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,133,136,137,148,156,],[-40,-41,-42,-43,-45,-46,-47,-48,-44,-67,-68,-66,-49,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,139,140,-51,-53,-50,-52,161,]),'TO':([51,52,53,54,55,56,57,58,99,104,105,106,109,113,114,115,116,117,118,119,120,121,122,123,124,133,136,137,148,154,155,],[-40,-41,-42,-43,-45,-46,-47,-48,-44,-67,-68,-66,-49,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-51,-53,-50,-52,159,160,]),'DOUBLE_LSQUAREBR':([59,131,],[93,145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,7,]),'empty':([0,3,9,26,27,29,35,40,64,65,72,134,],[2,2,12,12,12,12,39,39,39,102,102,102,]),'func':([0,3,35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[3,3,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'func1':([0,3,35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'func2':([0,3,35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'flist':([9,26,27,29,],[11,30,32,34,]),'type':([14,16,24,70,],[17,25,28,108,]),'body':([35,40,64,],[38,74,100,]),'stmt':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[40,40,97,40,149,150,151,152,153,162,163,172,173,174,175,]),'expr':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[41,41,41,98,41,103,104,105,106,109,103,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,103,147,148,41,41,41,41,41,154,156,41,41,164,167,41,41,41,41,]),'defvar':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'single_if':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'else_if':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'while_loop':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'for_loop':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'do_while':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'return_is':([35,40,62,64,69,139,140,141,142,143,157,158,168,169,170,171,],[49,49,49,49,107,49,49,49,49,49,49,49,49,49,49,49,]),'block':([35,40,62,64,139,140,141,142,143,157,158,168,169,170,171,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'on_list':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expr_list':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'ternary_expr':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'binary_expr':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'assignment':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'function_call':([35,40,62,63,64,65,66,67,68,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,95,134,135,138,139,140,141,142,143,144,145,157,158,159,160,168,169,170,171,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'clist':([65,72,134,],[101,110,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog','parser.py',28),
  ('prog -> func prog','prog',2,'p_prog','parser.py',29),
  ('func -> func1','func',1,'p_func','parser.py',35),
  ('func -> func2','func',1,'p_func','parser.py',36),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',40),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt','parser.py',45),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt','parser.py',46),
  ('stmt -> func SEMI_COLON','stmt',2,'p_stmt','parser.py',47),
  ('stmt -> single_if','stmt',1,'p_stmt','parser.py',48),
  ('stmt -> else_if','stmt',1,'p_stmt','parser.py',49),
  ('stmt -> while_loop','stmt',1,'p_stmt','parser.py',50),
  ('stmt -> for_loop','stmt',1,'p_stmt','parser.py',51),
  ('stmt -> do_while','stmt',1,'p_stmt','parser.py',52),
  ('stmt -> return_is SEMI_COLON','stmt',2,'p_stmt','parser.py',53),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',54),
  ('body -> empty','body',1,'p_body','parser.py',59),
  ('body -> stmt body','body',2,'p_body','parser.py',60),
  ('return_is -> RETURN expr','return_is',2,'p_return_is','parser.py',65),
  ('while_loop -> WHILE LPAREN expr RPAREN stmt','while_loop',5,'p_while_loop','parser.py',69),
  ('for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt','for_loop',9,'p_for_loop','parser.py',75),
  ('do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR','do_while',6,'p_do_while','parser.py',85),
  ('block -> BEGIN body END','block',3,'p_block','parser.py',91),
  ('single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt','single_if',5,'p_single_if','parser.py',95),
  ('else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt','else_if',7,'p_else_if','parser.py',101),
  ('defvar -> ID DBL_COLON type','defvar',3,'p_defvar','parser.py',107),
  ('defvar -> ID DBL_COLON type EQ expr','defvar',5,'p_defvar','parser.py',108),
  ('type -> INT','type',1,'p_type','parser.py',115),
  ('type -> STRING','type',1,'p_type','parser.py',116),
  ('type -> VECTOR','type',1,'p_type','parser.py',117),
  ('type -> NULL','type',1,'p_type','parser.py',118),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',119),
  ('func1 -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR','func1',11,'p_func1','parser.py',123),
  ('func2 -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is','func2',11,'p_func2','parser.py',129),
  ('flist -> empty','flist',1,'p_flist','parser.py',135),
  ('flist -> ID AS type','flist',3,'p_flist','parser.py',136),
  ('flist -> ID AS type COMMA flist','flist',5,'p_flist','parser.py',137),
  ('clist -> empty','clist',1,'p_clist','parser.py',146),
  ('clist -> expr','clist',1,'p_clist','parser.py',147),
  ('clist -> expr COMMA clist','clist',3,'p_clist','parser.py',148),
  ('expr -> on_list','expr',1,'p_expr','parser.py',159),
  ('expr -> expr_list','expr',1,'p_expr','parser.py',160),
  ('expr -> ternary_expr','expr',1,'p_expr','parser.py',161),
  ('expr -> binary_expr','expr',1,'p_expr','parser.py',162),
  ('expr -> ID','expr',1,'p_expr','parser.py',163),
  ('expr -> assignment','expr',1,'p_expr','parser.py',164),
  ('expr -> function_call','expr',1,'p_expr','parser.py',165),
  ('expr -> NUMBER','expr',1,'p_expr','parser.py',166),
  ('expr -> STRING','expr',1,'p_expr','parser.py',167),
  ('assignment -> ID EQ expr','assignment',3,'p_assignment_expr','parser.py',184),
  ('on_list -> expr LSQUAREBR expr RSQUAREBR','on_list',4,'p_on_list','parser.py',188),
  ('expr_list -> LSQUAREBR clist RSQUAREBR','expr_list',3,'p_expr_list','parser.py',192),
  ('ternary_expr -> expr QUESTION_MARK expr COLON expr','ternary_expr',5,'p_ternary_expr','parser.py',196),
  ('function_call -> ID LPAREN clist RPAREN','function_call',4,'p_function_call','parser.py',202),
  ('binary_expr -> expr PLUS expr','binary_expr',3,'p_binary_expr','parser.py',206),
  ('binary_expr -> expr MINUS expr','binary_expr',3,'p_binary_expr','parser.py',207),
  ('binary_expr -> expr TIMES expr','binary_expr',3,'p_binary_expr','parser.py',208),
  ('binary_expr -> expr DIVIDE expr','binary_expr',3,'p_binary_expr','parser.py',209),
  ('binary_expr -> expr GREATER_THAN expr','binary_expr',3,'p_binary_expr','parser.py',210),
  ('binary_expr -> expr LESS_THAN expr','binary_expr',3,'p_binary_expr','parser.py',211),
  ('binary_expr -> expr DOUBLE_EQ expr','binary_expr',3,'p_binary_expr','parser.py',212),
  ('binary_expr -> expr GREATER_THAN_EQ expr','binary_expr',3,'p_binary_expr','parser.py',213),
  ('binary_expr -> expr LESS_THAN_EQ expr','binary_expr',3,'p_binary_expr','parser.py',214),
  ('binary_expr -> expr NOT_EQ expr','binary_expr',3,'p_binary_expr','parser.py',215),
  ('binary_expr -> expr AND expr','binary_expr',3,'p_binary_expr','parser.py',216),
  ('binary_expr -> expr OR expr','binary_expr',3,'p_binary_expr','parser.py',217),
  ('binary_expr -> NOT expr','binary_expr',2,'p_binary_expr','parser.py',218),
  ('binary_expr -> PLUS expr','binary_expr',2,'p_binary_expr','parser.py',219),
  ('binary_expr -> MINUS expr','binary_expr',2,'p_binary_expr','parser.py',220),
  ('builtin_methods -> SCAN LPAREN RPAREN','builtin_methods',3,'p_builtin_methods','parser.py',224),
  ('builtin_methods -> PRINT LPAREN clist RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',225),
  ('builtin_methods -> LENGTH LPAREN clist RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',226),
  ('builtin_methods -> EXIT LPAREN clist RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',227),
  ('single_if -> IF LCURLYEBR error RCURLYEBR stmt','single_if',5,'p_single_if_error','parser.py',235),
  ('while_loop -> WHILE LPAREN error RPAREN stmt','while_loop',5,'p_while_loop_error','parser.py',239),
  ('func1_rtype -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR','func1_rtype',11,'p_func1_rtype_error','parser.py',253),
  ('func2_rtype -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN EQ GREATER_THAN return_is','func2_rtype',11,'p_func2_rtype_error','parser.py',265),
  ('func_flist -> FN ID LPAREN error RPAREN LCURLYEBR body RCURLYEBR','func_flist',8,'p_func_flist_error','parser.py',277),
  ('else_if -> IF DOUBLE_LSQUAREBR error DOUBLE_RSQUAREBR stmt ELSE stmt','else_if',7,'p_else_if_error','parser.py',284),
  ('for_loop -> FOR LPAREN ID EQ error TO expr RPAREN stmt','for_loop',9,'p_for_loop_error','parser.py',288),
  ('for_loop -> FOR LPAREN ID EQ expr TO error RPAREN stmt','for_loop',9,'p_for_loop_error','parser.py',289),
  ('for_loop -> FOR LPAREN ID EQ error TO error RPAREN stmt','for_loop',9,'p_for_loop_error','parser.py',290),
  ('defvar_type -> ID DBL_COLON error','defvar_type',3,'p_defvar_type_error','parser.py',294),
  ('defvar_type -> ID DBL_COLON error EQ expr','defvar_type',5,'p_defvar_type_error','parser.py',295),
  ('flist -> ID AS error','flist',3,'p_flist_type_error','parser.py',303),
  ('flist -> ID AS error COMMA flist','flist',5,'p_flist_type_error','parser.py',304),
  ('flist -> error AS type','flist',3,'p_flist_iden_error','parser.py',314),
  ('flist -> error AS type COMMA flist','flist',5,'p_flist_iden_error','parser.py',315),
  ('flist -> ID AS type COMMA error','flist',5,'p_flist_flist_error','parser.py',325),
]
