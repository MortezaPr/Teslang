
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS BEGIN BOOLEAN COLON COMMA DBL_COLON DIVIDE DO DOUBLE_EQ DOUBLE_LSQUAREBR DOUBLE_RSQUAREBR ELSE ELSEIF END EQ EXIT FALSE FN FOR GREATER_THAN GREATER_THAN_EQ ID IF INT LCURLYEBR LENGTH LESS_THAN LESS_THAN_EQ LIST LPAREN LSQUAREBR MINUS NOT NOT_EQ NULL NUMBER OR PLUS PRINT QUESTION_MARK RCURLYEBR RETURN RPAREN RSQUAREBR SCAN SEMI_COLON STRING TIMES TO TRUE VECTOR WHILEprog : empty\n        | func progfunc : func1\n        | func2empty :stmt : expr SEMI_COLON\n        | defvar SEMI_COLON\n        | func SEMI_COLON\n        | single_if\n        | else_if\n        | while_loop\n        | for_loop\n        | do_while\n        | return_is SEMI_COLON\n        | block\n        | builtin_methods SEMI_COLON\n        | function_call SEMI_COLON\n        | func1\n        | func2body : empty\n        | stmt bodyreturn_is : RETURN expr\n                     | RETURNwhile_loop : WHILE LPAREN expr RPAREN stmtfor_loop : FOR LPAREN ID EQ expr TO expr RPAREN stmtdo_while : DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBRblock : BEGIN body ENDsingle_if : IF DOUBLE_LSQUAREBR  expr DOUBLE_RSQUAREBR stmtelse_if : IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmtdefvar : ID DBL_COLON type\n        | ID DBL_COLON type EQ exprtype : INT\n        | STRING\n        | VECTOR\n        | NULL\n        | BOOLEANfunc1 : FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBRfunc2 :  FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_isflist : empty\n        | ID AS type\n        | ID  AS type COMMA flistclist : empty\n        | expr\n        | expr COMMA clistexpr : on_list\n        | expr_list\n        | ternary_expr\n        | binary_expr\n        | single_expr\n        | ID\n        | assignment\n        | function_call\n        | NUMBER\n        | STRING\n        | NULL\n        | LPAREN expr RPARENassignment : ID EQ expr\n                    | on_list EQ expron_list : expr LSQUAREBR expr RSQUAREBRexpr_list : LSQUAREBR clist RSQUAREBRternary_expr : expr QUESTION_MARK expr COLON exprfunction_call : ID LPAREN clist RPAREN\n                        | builtin_methodsbinary_expr :  expr PLUS expr\n        | expr MINUS expr\n        | expr TIMES expr\n        | expr DIVIDE expr\n        | expr GREATER_THAN expr\n        | expr LESS_THAN expr\n        | expr DOUBLE_EQ expr\n        | expr GREATER_THAN_EQ expr\n        | expr LESS_THAN_EQ expr\n        | expr NOT_EQ expr\n        | expr AND expr\n        | expr OR expr single_expr : NOT expr\n        | PLUS expr\n        | MINUS exprbuiltin_methods : SCAN LPAREN RPAREN\n        | PRINT LPAREN clist RPAREN\n        | LENGTH LPAREN clist RPAREN\n        | EXIT LPAREN clist RPAREN\n        | LIST LPAREN NUMBER RPARENsingle_if : IF LCURLYEBR error RCURLYEBR stmtwhile_loop : WHILE LPAREN error RPAREN stmtfunc1_rtype : FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBRfunc2_rtype :  FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN EQ GREATER_THAN return_isfunc_flist : FN ID LPAREN error RPAREN  LCURLYEBR body RCURLYEBRelse_if : IF DOUBLE_LSQUAREBR error DOUBLE_RSQUAREBR stmt ELSE stmtfor_loop : FOR LPAREN ID EQ error TO expr RPAREN stmt\n        | FOR LPAREN ID EQ expr TO error RPAREN stmt\n        | FOR LPAREN ID EQ error TO error RPAREN stmtdefvar_type : ID DBL_COLON error\n        | ID DBL_COLON error EQ exprflist : ID AS error\n        | ID AS error COMMA flistflist : error AS type\n        | error AS type COMMA flistflist : ID AS type COMMA error'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,7,56,57,58,59,60,61,62,63,64,69,85,86,87,88,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,157,162,165,166,175,176,177,178,181,],[-5,0,-1,-5,-3,-4,-2,-45,-46,-47,-48,-49,-51,-53,-54,-55,-23,-50,-52,-63,-37,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-79,-60,-62,-59,-80,-81,-82,-83,-61,]),'FN':([0,3,4,5,35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[6,6,-3,-4,6,6,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,6,-23,6,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,6,6,6,6,6,-80,-81,-82,-83,-61,-28,-84,-24,-85,6,6,-26,-29,-89,6,6,6,6,-25,-91,-92,-90,]),'ID':([6,9,26,27,29,35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,114,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[8,10,10,10,10,37,85,37,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,37,85,37,85,85,85,85,85,85,-50,-52,-63,-37,-6,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-7,-8,-14,-16,-17,85,85,85,154,-22,85,85,85,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,85,85,-62,-59,85,37,37,37,37,37,85,85,-80,-81,-82,-83,-61,-28,-84,-24,-85,37,37,85,85,-26,-29,-89,37,37,37,37,-25,-91,-92,-90,]),'LPAREN':([8,35,37,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[9,38,83,38,38,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,113,114,38,38,38,118,119,120,121,122,38,38,38,38,38,38,83,-52,-63,-37,-6,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-7,-8,-14,-16,-17,38,38,38,-22,38,38,38,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,38,38,-62,-59,38,38,38,38,38,38,38,38,-80,-81,-82,-83,-61,-28,-84,-24,-85,38,38,38,38,-26,-29,-89,38,38,38,38,-25,-91,-92,-90,]),'error':([9,14,26,27,29,111,112,113,173,192,193,],[13,18,31,13,13,150,151,153,188,198,199,]),'RPAREN':([9,11,12,17,18,19,20,21,22,23,25,26,27,29,30,31,32,34,56,57,58,59,60,61,62,63,64,83,84,85,86,87,118,119,120,121,124,125,126,127,128,131,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,152,153,157,158,159,160,161,162,163,165,166,175,176,177,178,179,181,197,198,199,200,],[-5,15,-39,-40,-95,-32,-33,-34,-35,-36,-97,-5,-5,-5,-41,-99,-96,-98,-45,-46,-47,-48,-49,-51,-53,-54,-55,-5,133,-50,-52,-63,157,-5,-5,-5,-42,-43,-77,-78,-76,-57,165,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,171,172,-79,175,176,177,178,-60,-5,-62,-59,-80,-81,-82,-83,-44,-61,201,202,203,204,]),'AS':([10,13,31,],[14,16,16,]),'INT':([14,16,24,81,],[19,19,19,19,]),'STRING':([14,16,24,35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,81,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[20,20,20,63,63,63,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,63,63,63,63,63,63,63,20,63,63,-50,-52,-63,-37,-6,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-7,-8,-14,-16,-17,63,63,63,-22,63,63,63,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,63,63,-62,-59,63,63,63,63,63,63,63,63,-80,-81,-82,-83,-61,-28,-84,-24,-85,63,63,63,63,-26,-29,-89,63,63,63,63,-25,-91,-92,-90,]),'VECTOR':([14,16,24,81,],[21,21,21,21,]),'NULL':([14,16,24,35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,81,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[22,22,22,64,64,64,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,64,64,64,64,64,64,64,22,64,64,-50,-52,-63,-37,-6,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-7,-8,-14,-16,-17,64,64,64,-22,64,64,64,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,64,64,-62,-59,64,64,64,64,64,64,64,64,-80,-81,-82,-83,-61,-28,-84,-24,-85,64,64,64,64,-26,-29,-89,64,64,64,64,-25,-91,-92,-90,]),'BOOLEAN':([14,16,24,81,],[23,23,23,23,]),'LESS_THAN':([15,37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[24,-50,98,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,98,-50,-52,-63,98,98,98,98,98,98,-56,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-79,-60,-62,-59,-80,-81,-82,-83,98,98,98,98,98,98,]),'COMMA':([17,18,19,20,21,22,23,25,56,57,58,59,60,61,62,63,64,85,86,87,125,126,127,128,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,157,162,165,166,175,176,177,178,181,],[26,27,-32,-33,-34,-35,-36,29,-45,-46,-47,-48,-49,-51,-53,-54,-55,-50,-52,-63,163,-77,-78,-76,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-79,-60,-62,-59,-80,-81,-82,-83,-61,]),'GREATER_THAN':([19,20,21,22,23,28,36,37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-32,-33,-34,-35,-36,33,80,-50,97,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,97,-50,-52,-63,97,97,97,97,97,97,-56,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-79,-60,-62,-59,-80,-81,-82,-83,97,97,97,97,97,97,]),'EQ':([19,20,21,22,23,33,37,56,85,130,154,166,],[-32,-33,-34,-35,-36,36,82,110,82,164,173,-59,]),'SEMI_COLON':([19,20,21,22,23,37,42,43,44,50,52,53,54,55,56,57,58,59,60,61,62,63,64,69,85,86,87,88,116,126,127,128,129,130,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,157,162,165,166,175,176,177,178,180,181,],[-32,-33,-34,-35,-36,-50,90,105,106,107,108,109,-3,-4,-45,-46,-47,-48,-49,-51,-53,-54,-55,-23,-50,-52,-63,-37,-22,-77,-78,-76,-38,-30,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-79,-60,-62,-59,-80,-81,-82,-83,-31,-61,]),'LCURLYEBR':([33,65,],[35,112,]),'RCURLYEBR':([35,39,40,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,69,85,86,87,88,89,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,151,156,157,162,165,166,175,176,177,178,181,182,184,185,186,194,195,196,205,206,207,208,],[-5,88,-20,-5,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,-23,-50,-52,-63,-37,-21,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,170,-27,-79,-60,-62,-59,-80,-81,-82,-83,-61,-28,-84,-24,-85,-26,-29,-89,-25,-91,-92,-90,]),'NUMBER':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,122,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[62,62,62,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,62,62,62,62,62,62,62,62,62,-50,-52,-63,-37,-6,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-7,-8,-14,-16,-17,62,62,62,-22,62,62,62,161,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,62,62,-62,-59,62,62,62,62,62,62,62,62,-80,-81,-82,-83,-61,-28,-84,-24,-85,62,62,62,62,-26,-29,-89,62,62,62,62,-25,-91,-92,-90,]),'IF':([35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[65,65,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,65,-23,65,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,65,65,65,65,65,-80,-81,-82,-83,-61,-28,-84,-24,-85,65,65,-26,-29,-89,65,65,65,65,-25,-91,-92,-90,]),'WHILE':([35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,85,86,87,88,90,105,106,107,108,109,115,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[66,66,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,66,-23,66,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,155,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,66,66,66,66,66,-80,-81,-82,-83,-61,-28,-84,-24,-85,66,66,-26,-29,-89,66,66,66,66,-25,-91,-92,-90,]),'FOR':([35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[67,67,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,67,-23,67,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,67,67,67,67,67,-80,-81,-82,-83,-61,-28,-84,-24,-85,67,67,-26,-29,-89,67,67,67,67,-25,-91,-92,-90,]),'DO':([35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[68,68,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,68,-23,68,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,68,68,68,68,68,-80,-81,-82,-83,-61,-28,-84,-24,-85,68,68,-26,-29,-89,68,68,68,68,-25,-91,-92,-90,]),'RETURN':([35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,80,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[69,69,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,69,-23,69,69,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,69,69,69,69,69,-80,-81,-82,-83,-61,-28,-84,-24,-85,69,69,-26,-29,-89,69,69,69,69,-25,-91,-92,-90,]),'BEGIN':([35,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,168,169,170,171,172,175,176,177,178,181,182,184,185,186,190,191,194,195,196,201,202,203,204,205,206,207,208,],[70,70,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,70,-23,70,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,70,70,70,70,70,-80,-81,-82,-83,-61,-28,-84,-24,-85,70,70,-26,-29,-89,70,70,70,70,-25,-91,-92,-90,]),'SCAN':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[71,71,71,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,71,71,71,71,71,71,71,71,71,-50,-52,-63,-37,-6,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-7,-8,-14,-16,-17,71,71,71,-22,71,71,71,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,71,71,-62,-59,71,71,71,71,71,71,71,71,-80,-81,-82,-83,-61,-28,-84,-24,-85,71,71,71,71,-26,-29,-89,71,71,71,71,-25,-91,-92,-90,]),'PRINT':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[72,72,72,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,72,72,72,72,72,72,72,72,72,-50,-52,-63,-37,-6,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-7,-8,-14,-16,-17,72,72,72,-22,72,72,72,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,72,72,-62,-59,72,72,72,72,72,72,72,72,-80,-81,-82,-83,-61,-28,-84,-24,-85,72,72,72,72,-26,-29,-89,72,72,72,72,-25,-91,-92,-90,]),'LENGTH':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[73,73,73,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,73,73,73,73,73,73,73,73,73,-50,-52,-63,-37,-6,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-7,-8,-14,-16,-17,73,73,73,-22,73,73,73,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,73,73,-62,-59,73,73,73,73,73,73,73,73,-80,-81,-82,-83,-61,-28,-84,-24,-85,73,73,73,73,-26,-29,-89,73,73,73,73,-25,-91,-92,-90,]),'EXIT':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[74,74,74,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,74,74,74,74,74,74,74,74,74,-50,-52,-63,-37,-6,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-7,-8,-14,-16,-17,74,74,74,-22,74,74,74,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,74,74,-62,-59,74,74,74,74,74,74,74,74,-80,-81,-82,-83,-61,-28,-84,-24,-85,74,74,74,74,-26,-29,-89,74,74,74,74,-25,-91,-92,-90,]),'LIST':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[75,75,75,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,75,75,75,75,75,75,75,75,75,-50,-52,-63,-37,-6,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-7,-8,-14,-16,-17,75,75,75,-22,75,75,75,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,75,75,-62,-59,75,75,75,75,75,75,75,75,-80,-81,-82,-83,-61,-28,-84,-24,-85,75,75,75,75,-26,-29,-89,75,75,75,75,-25,-91,-92,-90,]),'LSQUAREBR':([35,37,38,41,42,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,125,126,127,128,129,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,184,185,186,187,189,190,191,192,193,194,195,196,197,200,201,202,203,204,205,206,207,208,],[76,-50,76,76,91,-9,-10,-11,-12,-13,-15,-63,-52,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,76,76,76,76,76,76,76,76,76,91,-50,-52,-63,-37,-6,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-7,-8,-14,-16,-17,76,76,76,91,76,76,76,91,91,91,91,-38,91,-56,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-27,-79,-60,76,76,-62,-59,76,76,76,76,76,76,76,76,-80,-81,-82,-83,91,91,-28,-84,-24,-85,91,91,76,76,76,76,-26,-29,-89,91,91,76,76,76,76,-25,-91,-92,-90,]),'NOT':([35,38,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,184,185,186,190,191,192,193,194,195,196,201,202,203,204,205,206,207,208,],[79,79,79,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,79,79,79,79,79,79,79,79,79,-50,-52,-63,-37,-6,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-7,-8,-14,-16,-17,79,79,79,-22,79,79,79,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,79,79,-62,-59,79,79,79,79,79,79,79,79,-80,-81,-82,-83,-61,-28,-84,-24,-85,79,79,79,79,-26,-29,-89,79,79,79,79,-25,-91,-92,-90,]),'PLUS':([35,37,38,41,42,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,125,126,127,128,129,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,184,185,186,187,189,190,191,192,193,194,195,196,197,200,201,202,203,204,205,206,207,208,],[77,-50,77,77,93,-9,-10,-11,-12,-13,-15,-63,-52,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,77,77,77,77,77,77,77,77,77,93,-50,-52,-63,-37,-6,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-7,-8,-14,-16,-17,77,77,77,93,77,77,77,93,93,93,93,-38,93,-56,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-27,-79,-60,77,77,-62,-59,77,77,77,77,77,77,77,77,-80,-81,-82,-83,93,93,-28,-84,-24,-85,93,93,77,77,77,77,-26,-29,-89,93,93,77,77,77,77,-25,-91,-92,-90,]),'MINUS':([35,37,38,41,42,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,76,77,78,79,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,113,116,119,120,121,125,126,127,128,129,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,184,185,186,187,189,190,191,192,193,194,195,196,197,200,201,202,203,204,205,206,207,208,],[78,-50,78,78,94,-9,-10,-11,-12,-13,-15,-63,-52,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,78,78,78,78,78,78,78,78,78,94,-50,-52,-63,-37,-6,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-7,-8,-14,-16,-17,78,78,78,94,78,78,78,94,94,94,94,-38,94,-56,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-27,-79,-60,78,78,-62,-59,78,78,78,78,78,78,78,78,-80,-81,-82,-83,94,94,-28,-84,-24,-85,94,94,78,78,78,78,-26,-29,-89,94,94,78,78,78,78,-25,-91,-92,-90,]),'QUESTION_MARK':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,92,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,92,-50,-52,-63,92,92,92,92,92,92,-56,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-79,-60,-62,-59,-80,-81,-82,-83,92,92,92,92,92,92,]),'TIMES':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,95,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,95,-50,-52,-63,95,95,95,95,95,95,-56,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-79,-60,-62,-59,-80,-81,-82,-83,95,95,95,95,95,95,]),'DIVIDE':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,96,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,96,-50,-52,-63,96,96,96,96,96,96,-56,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-79,-60,-62,-59,-80,-81,-82,-83,96,96,96,96,96,96,]),'DOUBLE_EQ':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,99,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,99,-50,-52,-63,99,99,99,99,99,99,-56,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-79,-60,-62,-59,-80,-81,-82,-83,99,99,99,99,99,99,]),'GREATER_THAN_EQ':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,100,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,100,-50,-52,-63,100,100,100,100,100,100,-56,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-79,-60,-62,-59,-80,-81,-82,-83,100,100,100,100,100,100,]),'LESS_THAN_EQ':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,101,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,101,-50,-52,-63,101,101,101,101,101,101,-56,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-79,-60,-62,-59,-80,-81,-82,-83,101,101,101,101,101,101,]),'NOT_EQ':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,102,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,102,-50,-52,-63,102,102,102,102,102,102,-56,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-79,-60,-62,-59,-80,-81,-82,-83,102,102,102,102,102,102,]),'AND':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,103,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,103,-50,-52,-63,103,103,103,103,103,103,-56,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-79,-60,-62,-59,-80,-81,-82,-83,103,103,103,103,103,103,]),'OR':([37,42,52,53,56,57,58,59,60,61,62,63,64,84,85,86,87,116,125,126,127,128,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,157,162,165,166,175,176,177,178,180,181,187,189,197,200,],[-50,104,-63,-52,-45,-46,-47,-48,-49,-51,-53,-54,-55,104,-50,-52,-63,104,104,104,104,104,104,-56,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-79,-60,-62,-59,-80,-81,-82,-83,104,104,104,104,104,104,]),'DBL_COLON':([37,],[81,]),'END':([40,41,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,69,70,85,86,87,88,89,90,105,106,107,108,109,116,117,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,175,176,177,178,181,182,184,185,186,194,195,196,205,206,207,208,],[-20,-5,-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,-23,-5,-50,-52,-63,-37,-21,-6,-7,-8,-14,-16,-17,-22,156,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,-80,-81,-82,-83,-61,-28,-84,-24,-85,-26,-29,-89,-25,-91,-92,-90,]),'ELSE':([45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,63,64,69,85,86,87,88,90,105,106,107,108,109,116,126,127,128,129,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,156,157,162,165,166,175,176,177,178,181,182,183,184,185,186,194,195,196,205,206,207,208,],[-9,-10,-11,-12,-13,-15,-18,-19,-45,-46,-47,-48,-49,-51,-53,-54,-55,-23,-50,-52,-63,-37,-6,-7,-8,-14,-16,-17,-22,-77,-78,-76,-38,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-27,-79,-60,-62,-59,-80,-81,-82,-83,-61,190,191,-84,-24,-85,-26,-29,-89,-25,-91,-92,-90,]),'RSQUAREBR':([56,57,58,59,60,61,62,63,64,76,85,86,87,123,124,125,126,127,128,131,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,157,162,163,165,166,175,176,177,178,179,181,],[-45,-46,-47,-48,-49,-51,-53,-54,-55,-5,-50,-52,-63,162,-42,-43,-77,-78,-76,-57,-56,166,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-79,-60,-5,-62,-59,-80,-81,-82,-83,-44,-61,]),'COLON':([56,57,58,59,60,61,62,63,64,85,86,87,126,127,128,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,157,162,165,166,175,176,177,178,181,],[-45,-46,-47,-48,-49,-51,-53,-54,-55,-50,-52,-63,-77,-78,-76,-57,-56,167,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-79,-60,-62,-59,-80,-81,-82,-83,-61,]),'DOUBLE_RSQUAREBR':([56,57,58,59,60,61,62,63,64,85,86,87,126,127,128,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,157,162,165,166,175,176,177,178,181,189,],[-45,-46,-47,-48,-49,-51,-53,-54,-55,-50,-52,-63,-77,-78,-76,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,168,169,-79,-60,-62,-59,-80,-81,-82,-83,-61,194,]),'TO':([56,57,58,59,60,61,62,63,64,85,86,87,126,127,128,131,133,136,137,138,139,140,141,142,143,144,145,146,147,148,157,162,165,166,175,176,177,178,181,187,188,],[-45,-46,-47,-48,-49,-51,-53,-54,-55,-50,-52,-63,-77,-78,-76,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-58,-79,-60,-62,-59,-80,-81,-82,-83,-61,192,193,]),'DOUBLE_LSQUAREBR':([65,155,],[111,174,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,7,]),'empty':([0,3,9,26,27,29,35,41,70,76,83,119,120,121,163,],[2,2,12,12,12,12,40,40,40,124,124,124,124,124,124,]),'func':([0,3,35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[3,3,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'func1':([0,3,35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[4,4,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'func2':([0,3,35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[5,5,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'flist':([9,26,27,29,],[11,30,32,34,]),'type':([14,16,24,81,],[17,25,28,130,]),'body':([35,41,70,],[39,89,117,]),'stmt':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[41,41,115,41,182,183,184,185,186,195,196,205,206,207,208,]),'expr':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[42,84,42,42,116,42,125,126,127,128,131,125,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,125,125,125,125,180,181,42,42,42,42,42,187,189,42,42,197,200,42,42,42,42,]),'defvar':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'single_if':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'else_if':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'while_loop':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'for_loop':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'do_while':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'return_is':([35,41,68,70,80,168,169,170,171,172,190,191,201,202,203,204,],[50,50,50,50,129,50,50,50,50,50,50,50,50,50,50,50,]),'block':([35,41,68,70,168,169,170,171,172,190,191,201,202,203,204,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'builtin_methods':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[52,87,52,52,87,52,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,52,52,52,52,52,87,87,52,52,87,87,52,52,52,52,]),'function_call':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[53,86,53,53,86,53,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,53,53,53,53,53,86,86,53,53,86,86,53,53,53,53,]),'on_list':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'expr_list':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ternary_expr':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'binary_expr':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'single_expr':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'assignment':([35,38,41,68,69,70,76,77,78,79,82,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,113,119,120,121,163,164,167,168,169,170,171,172,173,174,190,191,192,193,201,202,203,204,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'clist':([76,83,119,120,121,163,],[123,132,158,159,160,179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog','parser.py',19),
  ('prog -> func prog','prog',2,'p_prog','parser.py',20),
  ('func -> func1','func',1,'p_func','parser.py',26),
  ('func -> func2','func',1,'p_func','parser.py',27),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',31),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt','parser.py',36),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt','parser.py',37),
  ('stmt -> func SEMI_COLON','stmt',2,'p_stmt','parser.py',38),
  ('stmt -> single_if','stmt',1,'p_stmt','parser.py',39),
  ('stmt -> else_if','stmt',1,'p_stmt','parser.py',40),
  ('stmt -> while_loop','stmt',1,'p_stmt','parser.py',41),
  ('stmt -> for_loop','stmt',1,'p_stmt','parser.py',42),
  ('stmt -> do_while','stmt',1,'p_stmt','parser.py',43),
  ('stmt -> return_is SEMI_COLON','stmt',2,'p_stmt','parser.py',44),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',45),
  ('stmt -> builtin_methods SEMI_COLON','stmt',2,'p_stmt','parser.py',46),
  ('stmt -> function_call SEMI_COLON','stmt',2,'p_stmt','parser.py',47),
  ('stmt -> func1','stmt',1,'p_stmt','parser.py',48),
  ('stmt -> func2','stmt',1,'p_stmt','parser.py',49),
  ('body -> empty','body',1,'p_body','parser.py',54),
  ('body -> stmt body','body',2,'p_body','parser.py',55),
  ('return_is -> RETURN expr','return_is',2,'p_return_is','parser.py',60),
  ('return_is -> RETURN','return_is',1,'p_return_is','parser.py',61),
  ('while_loop -> WHILE LPAREN expr RPAREN stmt','while_loop',5,'p_while_loop','parser.py',66),
  ('for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt','for_loop',9,'p_for_loop','parser.py',72),
  ('do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR','do_while',6,'p_do_while','parser.py',82),
  ('block -> BEGIN body END','block',3,'p_block','parser.py',88),
  ('single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt','single_if',5,'p_single_if','parser.py',92),
  ('else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt','else_if',7,'p_else_if','parser.py',98),
  ('defvar -> ID DBL_COLON type','defvar',3,'p_defvar','parser.py',104),
  ('defvar -> ID DBL_COLON type EQ expr','defvar',5,'p_defvar','parser.py',105),
  ('type -> INT','type',1,'p_type','parser.py',112),
  ('type -> STRING','type',1,'p_type','parser.py',113),
  ('type -> VECTOR','type',1,'p_type','parser.py',114),
  ('type -> NULL','type',1,'p_type','parser.py',115),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',116),
  ('func1 -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR','func1',11,'p_func1','parser.py',120),
  ('func2 -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is','func2',11,'p_func2','parser.py',126),
  ('flist -> empty','flist',1,'p_flist','parser.py',132),
  ('flist -> ID AS type','flist',3,'p_flist','parser.py',133),
  ('flist -> ID AS type COMMA flist','flist',5,'p_flist','parser.py',134),
  ('clist -> empty','clist',1,'p_clist','parser.py',143),
  ('clist -> expr','clist',1,'p_clist','parser.py',144),
  ('clist -> expr COMMA clist','clist',3,'p_clist','parser.py',145),
  ('expr -> on_list','expr',1,'p_expr','parser.py',156),
  ('expr -> expr_list','expr',1,'p_expr','parser.py',157),
  ('expr -> ternary_expr','expr',1,'p_expr','parser.py',158),
  ('expr -> binary_expr','expr',1,'p_expr','parser.py',159),
  ('expr -> single_expr','expr',1,'p_expr','parser.py',160),
  ('expr -> ID','expr',1,'p_expr','parser.py',161),
  ('expr -> assignment','expr',1,'p_expr','parser.py',162),
  ('expr -> function_call','expr',1,'p_expr','parser.py',163),
  ('expr -> NUMBER','expr',1,'p_expr','parser.py',164),
  ('expr -> STRING','expr',1,'p_expr','parser.py',165),
  ('expr -> NULL','expr',1,'p_expr','parser.py',166),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','parser.py',167),
  ('assignment -> ID EQ expr','assignment',3,'p_assignment_expr','parser.py',184),
  ('assignment -> on_list EQ expr','assignment',3,'p_assignment_expr','parser.py',185),
  ('on_list -> expr LSQUAREBR expr RSQUAREBR','on_list',4,'p_on_list','parser.py',189),
  ('expr_list -> LSQUAREBR clist RSQUAREBR','expr_list',3,'p_expr_list','parser.py',193),
  ('ternary_expr -> expr QUESTION_MARK expr COLON expr','ternary_expr',5,'p_ternary_expr','parser.py',197),
  ('function_call -> ID LPAREN clist RPAREN','function_call',4,'p_function_call','parser.py',203),
  ('function_call -> builtin_methods','function_call',1,'p_function_call','parser.py',204),
  ('binary_expr -> expr PLUS expr','binary_expr',3,'p_binary_expr','parser.py',211),
  ('binary_expr -> expr MINUS expr','binary_expr',3,'p_binary_expr','parser.py',212),
  ('binary_expr -> expr TIMES expr','binary_expr',3,'p_binary_expr','parser.py',213),
  ('binary_expr -> expr DIVIDE expr','binary_expr',3,'p_binary_expr','parser.py',214),
  ('binary_expr -> expr GREATER_THAN expr','binary_expr',3,'p_binary_expr','parser.py',215),
  ('binary_expr -> expr LESS_THAN expr','binary_expr',3,'p_binary_expr','parser.py',216),
  ('binary_expr -> expr DOUBLE_EQ expr','binary_expr',3,'p_binary_expr','parser.py',217),
  ('binary_expr -> expr GREATER_THAN_EQ expr','binary_expr',3,'p_binary_expr','parser.py',218),
  ('binary_expr -> expr LESS_THAN_EQ expr','binary_expr',3,'p_binary_expr','parser.py',219),
  ('binary_expr -> expr NOT_EQ expr','binary_expr',3,'p_binary_expr','parser.py',220),
  ('binary_expr -> expr AND expr','binary_expr',3,'p_binary_expr','parser.py',221),
  ('binary_expr -> expr OR expr','binary_expr',3,'p_binary_expr','parser.py',222),
  ('single_expr -> NOT expr','single_expr',2,'p_single_expr','parser.py',227),
  ('single_expr -> PLUS expr','single_expr',2,'p_single_expr','parser.py',228),
  ('single_expr -> MINUS expr','single_expr',2,'p_single_expr','parser.py',229),
  ('builtin_methods -> SCAN LPAREN RPAREN','builtin_methods',3,'p_builtin_methods','parser.py',234),
  ('builtin_methods -> PRINT LPAREN clist RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',235),
  ('builtin_methods -> LENGTH LPAREN clist RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',236),
  ('builtin_methods -> EXIT LPAREN clist RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',237),
  ('builtin_methods -> LIST LPAREN NUMBER RPAREN','builtin_methods',4,'p_builtin_methods','parser.py',238),
  ('single_if -> IF LCURLYEBR error RCURLYEBR stmt','single_if',5,'p_single_if_error','parser.py',246),
  ('while_loop -> WHILE LPAREN error RPAREN stmt','while_loop',5,'p_while_loop_error','parser.py',250),
  ('func1_rtype -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN LCURLYEBR body RCURLYEBR','func1_rtype',11,'p_func1_rtype_error','parser.py',264),
  ('func2_rtype -> FN ID LPAREN flist RPAREN LESS_THAN error GREATER_THAN EQ GREATER_THAN return_is','func2_rtype',11,'p_func2_rtype_error','parser.py',276),
  ('func_flist -> FN ID LPAREN error RPAREN LCURLYEBR body RCURLYEBR','func_flist',8,'p_func_flist_error','parser.py',288),
  ('else_if -> IF DOUBLE_LSQUAREBR error DOUBLE_RSQUAREBR stmt ELSE stmt','else_if',7,'p_else_if_error','parser.py',295),
  ('for_loop -> FOR LPAREN ID EQ error TO expr RPAREN stmt','for_loop',9,'p_for_loop_error','parser.py',299),
  ('for_loop -> FOR LPAREN ID EQ expr TO error RPAREN stmt','for_loop',9,'p_for_loop_error','parser.py',300),
  ('for_loop -> FOR LPAREN ID EQ error TO error RPAREN stmt','for_loop',9,'p_for_loop_error','parser.py',301),
  ('defvar_type -> ID DBL_COLON error','defvar_type',3,'p_defvar_type_error','parser.py',305),
  ('defvar_type -> ID DBL_COLON error EQ expr','defvar_type',5,'p_defvar_type_error','parser.py',306),
  ('flist -> ID AS error','flist',3,'p_flist_type_error','parser.py',314),
  ('flist -> ID AS error COMMA flist','flist',5,'p_flist_type_error','parser.py',315),
  ('flist -> error AS type','flist',3,'p_flist_iden_error','parser.py',325),
  ('flist -> error AS type COMMA flist','flist',5,'p_flist_iden_error','parser.py',326),
  ('flist -> ID AS type COMMA error','flist',5,'p_flist_flist_error','parser.py',336),
]
