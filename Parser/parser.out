Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF
    EXIT
    FALSE
    LENGTH
    LIST
    PRINT
    SCAN
    TRUE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> empty
Rule 2     prog -> func prog
Rule 3     empty -> <empty>
Rule 4     stmt -> expr SEMI_COLON
Rule 5     stmt -> defvar SEMI_COLON
Rule 6     stmt -> func SEMI_COLON
Rule 7     stmt -> single_if
Rule 8     stmt -> else_if
Rule 9     stmt -> while_loop
Rule 10    stmt -> for_loop
Rule 11    stmt -> do_while
Rule 12    stmt -> return_is SEMI_COLON
Rule 13    stmt -> block
Rule 14    body -> empty
Rule 15    body -> stmt body
Rule 16    return_is -> RETURN expr
Rule 17    while_loop -> WHILE LPAREN expr RPAREN stmt
Rule 18    for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt
Rule 19    do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
Rule 20    block -> BEGIN body END
Rule 21    single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
Rule 22    else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
Rule 23    defvar -> ID DBL_COLON type
Rule 24    defvar -> ID DBL_COLON type EQ expr
Rule 25    type -> INT
Rule 26    type -> STRING
Rule 27    type -> VECTOR
Rule 28    type -> NULL
Rule 29    type -> BOOLEAN
Rule 30    func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
Rule 31    func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
Rule 32    flist -> empty
Rule 33    flist -> ID AS type
Rule 34    flist -> ID AS type COMMA flist
Rule 35    clist -> empty
Rule 36    clist -> expr
Rule 37    clist -> expr COMMA clist
Rule 38    expr -> expr LSQUAREBR expr RSQUAREBR
Rule 39    expr -> LSQUAREBR clist RSQUAREBR
Rule 40    expr -> expr QUESTION_MARK expr COLON expr
Rule 41    expr -> expr PLUS expr
Rule 42    expr -> expr MINUS expr
Rule 43    expr -> expr TIMES expr
Rule 44    expr -> expr DIVIDE expr
Rule 45    expr -> expr GREATER_THAN expr
Rule 46    expr -> expr LESS_THAN expr
Rule 47    expr -> expr DOUBLE_EQ expr
Rule 48    expr -> expr GREATER_THAN_EQ expr
Rule 49    expr -> expr LESS_THAN_EQ expr
Rule 50    expr -> expr NOT_EQ expr
Rule 51    expr -> expr AND expr
Rule 52    expr -> expr OR expr
Rule 53    expr -> NOT expr
Rule 54    expr -> PLUS expr
Rule 55    expr -> MINUS expr
Rule 56    expr -> ID
Rule 57    expr -> ID EQ expr
Rule 58    expr -> ID LPAREN clist RPAREN
Rule 59    expr -> NUMBER
Rule 60    expr -> STRING

Terminals, with rules where they appear

AND                  : 51
AS                   : 33 34
BEGIN                : 20
BOOLEAN              : 29
COLON                : 40
COMMA                : 34 37
DBL_COLON            : 23 24
DIVIDE               : 44
DO                   : 19
DOUBLE_EQ            : 47
DOUBLE_LSQUAREBR     : 19 21 22
DOUBLE_RSQUAREBR     : 19 21 22
ELSE                 : 22
ELSEIF               : 
END                  : 20
EQ                   : 18 24 31 57
EXIT                 : 
FALSE                : 
FN                   : 30 31
FOR                  : 18
GREATER_THAN         : 30 31 31 45
GREATER_THAN_EQ      : 48
ID                   : 18 23 24 30 31 33 34 56 57 58
IF                   : 21 22
INT                  : 25
LCURLYEBR            : 30
LENGTH               : 
LESS_THAN            : 30 31 46
LESS_THAN_EQ         : 49
LIST                 : 
LPAREN               : 17 18 30 31 58
LSQUAREBR            : 38 39
MINUS                : 42 55
NOT                  : 53
NOT_EQ               : 50
NULL                 : 28
NUMBER               : 59
OR                   : 52
PLUS                 : 41 54
PRINT                : 
QUESTION_MARK        : 40
RCURLYEBR            : 30
RETURN               : 16
RPAREN               : 17 18 30 31 58
RSQUAREBR            : 38 39
SCAN                 : 
SEMI_COLON           : 4 5 6 12
STRING               : 26 60
TIMES                : 43
TO                   : 18
TRUE                 : 
VECTOR               : 27
WHILE                : 17 19
error                : 

Nonterminals, with rules where they appear

block                : 13
body                 : 15 20 30
clist                : 37 39 58
defvar               : 5
do_while             : 11
else_if              : 8
empty                : 1 14 32 35
expr                 : 4 16 17 18 18 19 21 22 24 36 37 38 38 40 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 54 55 57
flist                : 30 31 34
for_loop             : 10
func                 : 2 6
prog                 : 2 0
return_is            : 12 31
single_if            : 7
stmt                 : 15 17 18 19 21 22 22
type                 : 23 24 30 31 33 34
while_loop           : 9

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (3) empty -> .
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is

    $end            reduce using rule 3 (empty -> .)
    FN              shift and go to state 4

    prog                           shift and go to state 1
    empty                          shift and go to state 2
    func                           shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> empty .

    $end            reduce using rule 1 (prog -> empty .)


state 3

    (2) prog -> func . prog
    (1) prog -> . empty
    (2) prog -> . func prog
    (3) empty -> .
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is

    $end            reduce using rule 3 (empty -> .)
    FN              shift and go to state 4

    func                           shift and go to state 3
    prog                           shift and go to state 5
    empty                          shift and go to state 2

state 4

    (30) func -> FN . ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN . ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is

    ID              shift and go to state 6


state 5

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 6

    (30) func -> FN ID . LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN ID . LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is

    LPAREN          shift and go to state 7


state 7

    (30) func -> FN ID LPAREN . flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN ID LPAREN . flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (32) flist -> . empty
    (33) flist -> . ID AS type
    (34) flist -> . ID AS type COMMA flist
    (3) empty -> .

    ID              shift and go to state 8
    RPAREN          reduce using rule 3 (empty -> .)

    flist                          shift and go to state 9
    empty                          shift and go to state 10

state 8

    (33) flist -> ID . AS type
    (34) flist -> ID . AS type COMMA flist

    AS              shift and go to state 11


state 9

    (30) func -> FN ID LPAREN flist . RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN ID LPAREN flist . RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is

    RPAREN          shift and go to state 12


state 10

    (32) flist -> empty .

    RPAREN          reduce using rule 32 (flist -> empty .)


state 11

    (33) flist -> ID AS . type
    (34) flist -> ID AS . type COMMA flist
    (25) type -> . INT
    (26) type -> . STRING
    (27) type -> . VECTOR
    (28) type -> . NULL
    (29) type -> . BOOLEAN

    INT             shift and go to state 14
    STRING          shift and go to state 15
    VECTOR          shift and go to state 16
    NULL            shift and go to state 17
    BOOLEAN         shift and go to state 18

    type                           shift and go to state 13

state 12

    (30) func -> FN ID LPAREN flist RPAREN . LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN ID LPAREN flist RPAREN . LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is

    LESS_THAN       shift and go to state 19


state 13

    (33) flist -> ID AS type .
    (34) flist -> ID AS type . COMMA flist

    RPAREN          reduce using rule 33 (flist -> ID AS type .)
    COMMA           shift and go to state 20


state 14

    (25) type -> INT .

    COMMA           reduce using rule 25 (type -> INT .)
    RPAREN          reduce using rule 25 (type -> INT .)
    GREATER_THAN    reduce using rule 25 (type -> INT .)
    EQ              reduce using rule 25 (type -> INT .)
    SEMI_COLON      reduce using rule 25 (type -> INT .)


state 15

    (26) type -> STRING .

    COMMA           reduce using rule 26 (type -> STRING .)
    RPAREN          reduce using rule 26 (type -> STRING .)
    GREATER_THAN    reduce using rule 26 (type -> STRING .)
    EQ              reduce using rule 26 (type -> STRING .)
    SEMI_COLON      reduce using rule 26 (type -> STRING .)


state 16

    (27) type -> VECTOR .

    COMMA           reduce using rule 27 (type -> VECTOR .)
    RPAREN          reduce using rule 27 (type -> VECTOR .)
    GREATER_THAN    reduce using rule 27 (type -> VECTOR .)
    EQ              reduce using rule 27 (type -> VECTOR .)
    SEMI_COLON      reduce using rule 27 (type -> VECTOR .)


state 17

    (28) type -> NULL .

    COMMA           reduce using rule 28 (type -> NULL .)
    RPAREN          reduce using rule 28 (type -> NULL .)
    GREATER_THAN    reduce using rule 28 (type -> NULL .)
    EQ              reduce using rule 28 (type -> NULL .)
    SEMI_COLON      reduce using rule 28 (type -> NULL .)


state 18

    (29) type -> BOOLEAN .

    COMMA           reduce using rule 29 (type -> BOOLEAN .)
    RPAREN          reduce using rule 29 (type -> BOOLEAN .)
    GREATER_THAN    reduce using rule 29 (type -> BOOLEAN .)
    EQ              reduce using rule 29 (type -> BOOLEAN .)
    SEMI_COLON      reduce using rule 29 (type -> BOOLEAN .)


state 19

    (30) func -> FN ID LPAREN flist RPAREN LESS_THAN . type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN ID LPAREN flist RPAREN LESS_THAN . type GREATER_THAN EQ GREATER_THAN return_is
    (25) type -> . INT
    (26) type -> . STRING
    (27) type -> . VECTOR
    (28) type -> . NULL
    (29) type -> . BOOLEAN

    INT             shift and go to state 14
    STRING          shift and go to state 15
    VECTOR          shift and go to state 16
    NULL            shift and go to state 17
    BOOLEAN         shift and go to state 18

    type                           shift and go to state 21

state 20

    (34) flist -> ID AS type COMMA . flist
    (32) flist -> . empty
    (33) flist -> . ID AS type
    (34) flist -> . ID AS type COMMA flist
    (3) empty -> .

    ID              shift and go to state 8
    RPAREN          reduce using rule 3 (empty -> .)

    flist                          shift and go to state 22
    empty                          shift and go to state 10

state 21

    (30) func -> FN ID LPAREN flist RPAREN LESS_THAN type . GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> FN ID LPAREN flist RPAREN LESS_THAN type . GREATER_THAN EQ GREATER_THAN return_is

    GREATER_THAN    shift and go to state 23


state 22

    (34) flist -> ID AS type COMMA flist .

    RPAREN          reduce using rule 34 (flist -> ID AS type COMMA flist .)


state 23

    (30) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN . LCURLYEBR body RCURLYEBR
    (31) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN . EQ GREATER_THAN return_is

    LCURLYEBR       shift and go to state 24
    EQ              shift and go to state 25


state 24

    (30) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR . body RCURLYEBR
    (14) body -> . empty
    (15) body -> . stmt body
    (3) empty -> .
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    RCURLYEBR       reduce using rule 3 (empty -> .)
    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    body                           shift and go to state 27
    empty                          shift and go to state 28
    stmt                           shift and go to state 29
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 25

    (31) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ . GREATER_THAN return_is

    GREATER_THAN    shift and go to state 52


state 26

    (56) expr -> ID .
    (57) expr -> ID . EQ expr
    (58) expr -> ID . LPAREN clist RPAREN
    (23) defvar -> ID . DBL_COLON type
    (24) defvar -> ID . DBL_COLON type EQ expr

    SEMI_COLON      reduce using rule 56 (expr -> ID .)
    LSQUAREBR       reduce using rule 56 (expr -> ID .)
    QUESTION_MARK   reduce using rule 56 (expr -> ID .)
    PLUS            reduce using rule 56 (expr -> ID .)
    MINUS           reduce using rule 56 (expr -> ID .)
    TIMES           reduce using rule 56 (expr -> ID .)
    DIVIDE          reduce using rule 56 (expr -> ID .)
    GREATER_THAN    reduce using rule 56 (expr -> ID .)
    LESS_THAN       reduce using rule 56 (expr -> ID .)
    DOUBLE_EQ       reduce using rule 56 (expr -> ID .)
    GREATER_THAN_EQ reduce using rule 56 (expr -> ID .)
    LESS_THAN_EQ    reduce using rule 56 (expr -> ID .)
    NOT_EQ          reduce using rule 56 (expr -> ID .)
    AND             reduce using rule 56 (expr -> ID .)
    OR              reduce using rule 56 (expr -> ID .)
    EQ              shift and go to state 53
    LPAREN          shift and go to state 54
    DBL_COLON       shift and go to state 55


state 27

    (30) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body . RCURLYEBR

    RCURLYEBR       shift and go to state 56


state 28

    (14) body -> empty .

    RCURLYEBR       reduce using rule 14 (body -> empty .)
    END             reduce using rule 14 (body -> empty .)


state 29

    (15) body -> stmt . body
    (14) body -> . empty
    (15) body -> . stmt body
    (3) empty -> .
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    RCURLYEBR       reduce using rule 3 (empty -> .)
    END             reduce using rule 3 (empty -> .)
    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    stmt                           shift and go to state 29
    body                           shift and go to state 57
    empty                          shift and go to state 28
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 30

    (4) stmt -> expr . SEMI_COLON
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    SEMI_COLON      shift and go to state 58
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 31

    (5) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 73


state 32

    (6) stmt -> func . SEMI_COLON

    SEMI_COLON      shift and go to state 74


state 33

    (7) stmt -> single_if .

    LSQUAREBR       reduce using rule 7 (stmt -> single_if .)
    NOT             reduce using rule 7 (stmt -> single_if .)
    PLUS            reduce using rule 7 (stmt -> single_if .)
    MINUS           reduce using rule 7 (stmt -> single_if .)
    ID              reduce using rule 7 (stmt -> single_if .)
    NUMBER          reduce using rule 7 (stmt -> single_if .)
    STRING          reduce using rule 7 (stmt -> single_if .)
    FN              reduce using rule 7 (stmt -> single_if .)
    IF              reduce using rule 7 (stmt -> single_if .)
    WHILE           reduce using rule 7 (stmt -> single_if .)
    FOR             reduce using rule 7 (stmt -> single_if .)
    DO              reduce using rule 7 (stmt -> single_if .)
    RETURN          reduce using rule 7 (stmt -> single_if .)
    BEGIN           reduce using rule 7 (stmt -> single_if .)
    RCURLYEBR       reduce using rule 7 (stmt -> single_if .)
    END             reduce using rule 7 (stmt -> single_if .)
    ELSE            reduce using rule 7 (stmt -> single_if .)


state 34

    (8) stmt -> else_if .

    LSQUAREBR       reduce using rule 8 (stmt -> else_if .)
    NOT             reduce using rule 8 (stmt -> else_if .)
    PLUS            reduce using rule 8 (stmt -> else_if .)
    MINUS           reduce using rule 8 (stmt -> else_if .)
    ID              reduce using rule 8 (stmt -> else_if .)
    NUMBER          reduce using rule 8 (stmt -> else_if .)
    STRING          reduce using rule 8 (stmt -> else_if .)
    FN              reduce using rule 8 (stmt -> else_if .)
    IF              reduce using rule 8 (stmt -> else_if .)
    WHILE           reduce using rule 8 (stmt -> else_if .)
    FOR             reduce using rule 8 (stmt -> else_if .)
    DO              reduce using rule 8 (stmt -> else_if .)
    RETURN          reduce using rule 8 (stmt -> else_if .)
    BEGIN           reduce using rule 8 (stmt -> else_if .)
    RCURLYEBR       reduce using rule 8 (stmt -> else_if .)
    END             reduce using rule 8 (stmt -> else_if .)
    ELSE            reduce using rule 8 (stmt -> else_if .)


state 35

    (9) stmt -> while_loop .

    LSQUAREBR       reduce using rule 9 (stmt -> while_loop .)
    NOT             reduce using rule 9 (stmt -> while_loop .)
    PLUS            reduce using rule 9 (stmt -> while_loop .)
    MINUS           reduce using rule 9 (stmt -> while_loop .)
    ID              reduce using rule 9 (stmt -> while_loop .)
    NUMBER          reduce using rule 9 (stmt -> while_loop .)
    STRING          reduce using rule 9 (stmt -> while_loop .)
    FN              reduce using rule 9 (stmt -> while_loop .)
    IF              reduce using rule 9 (stmt -> while_loop .)
    WHILE           reduce using rule 9 (stmt -> while_loop .)
    FOR             reduce using rule 9 (stmt -> while_loop .)
    DO              reduce using rule 9 (stmt -> while_loop .)
    RETURN          reduce using rule 9 (stmt -> while_loop .)
    BEGIN           reduce using rule 9 (stmt -> while_loop .)
    RCURLYEBR       reduce using rule 9 (stmt -> while_loop .)
    END             reduce using rule 9 (stmt -> while_loop .)
    ELSE            reduce using rule 9 (stmt -> while_loop .)


state 36

    (10) stmt -> for_loop .

    LSQUAREBR       reduce using rule 10 (stmt -> for_loop .)
    NOT             reduce using rule 10 (stmt -> for_loop .)
    PLUS            reduce using rule 10 (stmt -> for_loop .)
    MINUS           reduce using rule 10 (stmt -> for_loop .)
    ID              reduce using rule 10 (stmt -> for_loop .)
    NUMBER          reduce using rule 10 (stmt -> for_loop .)
    STRING          reduce using rule 10 (stmt -> for_loop .)
    FN              reduce using rule 10 (stmt -> for_loop .)
    IF              reduce using rule 10 (stmt -> for_loop .)
    WHILE           reduce using rule 10 (stmt -> for_loop .)
    FOR             reduce using rule 10 (stmt -> for_loop .)
    DO              reduce using rule 10 (stmt -> for_loop .)
    RETURN          reduce using rule 10 (stmt -> for_loop .)
    BEGIN           reduce using rule 10 (stmt -> for_loop .)
    RCURLYEBR       reduce using rule 10 (stmt -> for_loop .)
    END             reduce using rule 10 (stmt -> for_loop .)
    ELSE            reduce using rule 10 (stmt -> for_loop .)


state 37

    (11) stmt -> do_while .

    LSQUAREBR       reduce using rule 11 (stmt -> do_while .)
    NOT             reduce using rule 11 (stmt -> do_while .)
    PLUS            reduce using rule 11 (stmt -> do_while .)
    MINUS           reduce using rule 11 (stmt -> do_while .)
    ID              reduce using rule 11 (stmt -> do_while .)
    NUMBER          reduce using rule 11 (stmt -> do_while .)
    STRING          reduce using rule 11 (stmt -> do_while .)
    FN              reduce using rule 11 (stmt -> do_while .)
    IF              reduce using rule 11 (stmt -> do_while .)
    WHILE           reduce using rule 11 (stmt -> do_while .)
    FOR             reduce using rule 11 (stmt -> do_while .)
    DO              reduce using rule 11 (stmt -> do_while .)
    RETURN          reduce using rule 11 (stmt -> do_while .)
    BEGIN           reduce using rule 11 (stmt -> do_while .)
    RCURLYEBR       reduce using rule 11 (stmt -> do_while .)
    END             reduce using rule 11 (stmt -> do_while .)
    ELSE            reduce using rule 11 (stmt -> do_while .)


state 38

    (12) stmt -> return_is . SEMI_COLON

    SEMI_COLON      shift and go to state 75


state 39

    (13) stmt -> block .

    LSQUAREBR       reduce using rule 13 (stmt -> block .)
    NOT             reduce using rule 13 (stmt -> block .)
    PLUS            reduce using rule 13 (stmt -> block .)
    MINUS           reduce using rule 13 (stmt -> block .)
    ID              reduce using rule 13 (stmt -> block .)
    NUMBER          reduce using rule 13 (stmt -> block .)
    STRING          reduce using rule 13 (stmt -> block .)
    FN              reduce using rule 13 (stmt -> block .)
    IF              reduce using rule 13 (stmt -> block .)
    WHILE           reduce using rule 13 (stmt -> block .)
    FOR             reduce using rule 13 (stmt -> block .)
    DO              reduce using rule 13 (stmt -> block .)
    RETURN          reduce using rule 13 (stmt -> block .)
    BEGIN           reduce using rule 13 (stmt -> block .)
    RCURLYEBR       reduce using rule 13 (stmt -> block .)
    END             reduce using rule 13 (stmt -> block .)
    ELSE            reduce using rule 13 (stmt -> block .)


state 40

    (39) expr -> LSQUAREBR . clist RSQUAREBR
    (35) clist -> . empty
    (36) clist -> . expr
    (37) clist -> . expr COMMA clist
    (3) empty -> .
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    RSQUAREBR       reduce using rule 3 (empty -> .)
    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    clist                          shift and go to state 76
    empty                          shift and go to state 77
    expr                           shift and go to state 78

state 41

    (54) expr -> PLUS . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 80

state 42

    (55) expr -> MINUS . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 81

state 43

    (53) expr -> NOT . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 82

state 44

    (59) expr -> NUMBER .

    SEMI_COLON      reduce using rule 59 (expr -> NUMBER .)
    LSQUAREBR       reduce using rule 59 (expr -> NUMBER .)
    QUESTION_MARK   reduce using rule 59 (expr -> NUMBER .)
    PLUS            reduce using rule 59 (expr -> NUMBER .)
    MINUS           reduce using rule 59 (expr -> NUMBER .)
    TIMES           reduce using rule 59 (expr -> NUMBER .)
    DIVIDE          reduce using rule 59 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 59 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 59 (expr -> NUMBER .)
    DOUBLE_EQ       reduce using rule 59 (expr -> NUMBER .)
    GREATER_THAN_EQ reduce using rule 59 (expr -> NUMBER .)
    LESS_THAN_EQ    reduce using rule 59 (expr -> NUMBER .)
    NOT_EQ          reduce using rule 59 (expr -> NUMBER .)
    AND             reduce using rule 59 (expr -> NUMBER .)
    OR              reduce using rule 59 (expr -> NUMBER .)
    COMMA           reduce using rule 59 (expr -> NUMBER .)
    RSQUAREBR       reduce using rule 59 (expr -> NUMBER .)
    FN              reduce using rule 59 (expr -> NUMBER .)
    $end            reduce using rule 59 (expr -> NUMBER .)
    RPAREN          reduce using rule 59 (expr -> NUMBER .)
    COLON           reduce using rule 59 (expr -> NUMBER .)
    DOUBLE_RSQUAREBR reduce using rule 59 (expr -> NUMBER .)
    TO              reduce using rule 59 (expr -> NUMBER .)


state 45

    (60) expr -> STRING .

    SEMI_COLON      reduce using rule 60 (expr -> STRING .)
    LSQUAREBR       reduce using rule 60 (expr -> STRING .)
    QUESTION_MARK   reduce using rule 60 (expr -> STRING .)
    PLUS            reduce using rule 60 (expr -> STRING .)
    MINUS           reduce using rule 60 (expr -> STRING .)
    TIMES           reduce using rule 60 (expr -> STRING .)
    DIVIDE          reduce using rule 60 (expr -> STRING .)
    GREATER_THAN    reduce using rule 60 (expr -> STRING .)
    LESS_THAN       reduce using rule 60 (expr -> STRING .)
    DOUBLE_EQ       reduce using rule 60 (expr -> STRING .)
    GREATER_THAN_EQ reduce using rule 60 (expr -> STRING .)
    LESS_THAN_EQ    reduce using rule 60 (expr -> STRING .)
    NOT_EQ          reduce using rule 60 (expr -> STRING .)
    AND             reduce using rule 60 (expr -> STRING .)
    OR              reduce using rule 60 (expr -> STRING .)
    COMMA           reduce using rule 60 (expr -> STRING .)
    RSQUAREBR       reduce using rule 60 (expr -> STRING .)
    FN              reduce using rule 60 (expr -> STRING .)
    $end            reduce using rule 60 (expr -> STRING .)
    RPAREN          reduce using rule 60 (expr -> STRING .)
    COLON           reduce using rule 60 (expr -> STRING .)
    DOUBLE_RSQUAREBR reduce using rule 60 (expr -> STRING .)
    TO              reduce using rule 60 (expr -> STRING .)


state 46

    (21) single_if -> IF . DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> IF . DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt

    DOUBLE_LSQUAREBR shift and go to state 83


state 47

    (17) while_loop -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 84


state 48

    (18) for_loop -> FOR . LPAREN ID EQ expr TO expr RPAREN stmt

    LPAREN          shift and go to state 85


state 49

    (19) do_while -> DO . stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    stmt                           shift and go to state 86
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 50

    (16) return_is -> RETURN . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 87

state 51

    (20) block -> BEGIN . body END
    (14) body -> . empty
    (15) body -> . stmt body
    (3) empty -> .
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    END             reduce using rule 3 (empty -> .)
    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    body                           shift and go to state 88
    empty                          shift and go to state 28
    stmt                           shift and go to state 29
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 52

    (31) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN . return_is
    (16) return_is -> . RETURN expr

    RETURN          shift and go to state 50

    return_is                      shift and go to state 89

state 53

    (57) expr -> ID EQ . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 90

state 54

    (58) expr -> ID LPAREN . clist RPAREN
    (35) clist -> . empty
    (36) clist -> . expr
    (37) clist -> . expr COMMA clist
    (3) empty -> .
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    RPAREN          reduce using rule 3 (empty -> .)
    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    clist                          shift and go to state 91
    empty                          shift and go to state 77
    expr                           shift and go to state 78

state 55

    (23) defvar -> ID DBL_COLON . type
    (24) defvar -> ID DBL_COLON . type EQ expr
    (25) type -> . INT
    (26) type -> . STRING
    (27) type -> . VECTOR
    (28) type -> . NULL
    (29) type -> . BOOLEAN

    INT             shift and go to state 14
    STRING          shift and go to state 15
    VECTOR          shift and go to state 16
    NULL            shift and go to state 17
    BOOLEAN         shift and go to state 18

    type                           shift and go to state 92

state 56

    (30) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .

    FN              reduce using rule 30 (func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .)
    $end            reduce using rule 30 (func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .)
    SEMI_COLON      reduce using rule 30 (func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR .)


state 57

    (15) body -> stmt body .

    RCURLYEBR       reduce using rule 15 (body -> stmt body .)
    END             reduce using rule 15 (body -> stmt body .)


state 58

    (4) stmt -> expr SEMI_COLON .

    LSQUAREBR       reduce using rule 4 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 4 (stmt -> expr SEMI_COLON .)
    PLUS            reduce using rule 4 (stmt -> expr SEMI_COLON .)
    MINUS           reduce using rule 4 (stmt -> expr SEMI_COLON .)
    ID              reduce using rule 4 (stmt -> expr SEMI_COLON .)
    NUMBER          reduce using rule 4 (stmt -> expr SEMI_COLON .)
    STRING          reduce using rule 4 (stmt -> expr SEMI_COLON .)
    FN              reduce using rule 4 (stmt -> expr SEMI_COLON .)
    IF              reduce using rule 4 (stmt -> expr SEMI_COLON .)
    WHILE           reduce using rule 4 (stmt -> expr SEMI_COLON .)
    FOR             reduce using rule 4 (stmt -> expr SEMI_COLON .)
    DO              reduce using rule 4 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 4 (stmt -> expr SEMI_COLON .)
    BEGIN           reduce using rule 4 (stmt -> expr SEMI_COLON .)
    RCURLYEBR       reduce using rule 4 (stmt -> expr SEMI_COLON .)
    END             reduce using rule 4 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 4 (stmt -> expr SEMI_COLON .)


state 59

    (38) expr -> expr LSQUAREBR . expr RSQUAREBR
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 93

state 60

    (40) expr -> expr QUESTION_MARK . expr COLON expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 94

state 61

    (41) expr -> expr PLUS . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 95

state 62

    (42) expr -> expr MINUS . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 96

state 63

    (43) expr -> expr TIMES . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 97

state 64

    (44) expr -> expr DIVIDE . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 98

state 65

    (45) expr -> expr GREATER_THAN . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 99

state 66

    (46) expr -> expr LESS_THAN . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 100

state 67

    (47) expr -> expr DOUBLE_EQ . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 101

state 68

    (48) expr -> expr GREATER_THAN_EQ . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 102

state 69

    (49) expr -> expr LESS_THAN_EQ . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 103

state 70

    (50) expr -> expr NOT_EQ . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 104

state 71

    (51) expr -> expr AND . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 105

state 72

    (52) expr -> expr OR . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 106

state 73

    (5) stmt -> defvar SEMI_COLON .

    LSQUAREBR       reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    PLUS            reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    MINUS           reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    ID              reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    NUMBER          reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    STRING          reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    FN              reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    IF              reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    WHILE           reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    FOR             reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    DO              reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    BEGIN           reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    RCURLYEBR       reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    END             reduce using rule 5 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 5 (stmt -> defvar SEMI_COLON .)


state 74

    (6) stmt -> func SEMI_COLON .

    LSQUAREBR       reduce using rule 6 (stmt -> func SEMI_COLON .)
    NOT             reduce using rule 6 (stmt -> func SEMI_COLON .)
    PLUS            reduce using rule 6 (stmt -> func SEMI_COLON .)
    MINUS           reduce using rule 6 (stmt -> func SEMI_COLON .)
    ID              reduce using rule 6 (stmt -> func SEMI_COLON .)
    NUMBER          reduce using rule 6 (stmt -> func SEMI_COLON .)
    STRING          reduce using rule 6 (stmt -> func SEMI_COLON .)
    FN              reduce using rule 6 (stmt -> func SEMI_COLON .)
    IF              reduce using rule 6 (stmt -> func SEMI_COLON .)
    WHILE           reduce using rule 6 (stmt -> func SEMI_COLON .)
    FOR             reduce using rule 6 (stmt -> func SEMI_COLON .)
    DO              reduce using rule 6 (stmt -> func SEMI_COLON .)
    RETURN          reduce using rule 6 (stmt -> func SEMI_COLON .)
    BEGIN           reduce using rule 6 (stmt -> func SEMI_COLON .)
    RCURLYEBR       reduce using rule 6 (stmt -> func SEMI_COLON .)
    END             reduce using rule 6 (stmt -> func SEMI_COLON .)
    ELSE            reduce using rule 6 (stmt -> func SEMI_COLON .)


state 75

    (12) stmt -> return_is SEMI_COLON .

    LSQUAREBR       reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    NOT             reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    PLUS            reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    MINUS           reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    ID              reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    NUMBER          reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    STRING          reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    FN              reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    IF              reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    WHILE           reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    FOR             reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    DO              reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    RETURN          reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    BEGIN           reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    RCURLYEBR       reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    END             reduce using rule 12 (stmt -> return_is SEMI_COLON .)
    ELSE            reduce using rule 12 (stmt -> return_is SEMI_COLON .)


state 76

    (39) expr -> LSQUAREBR clist . RSQUAREBR

    RSQUAREBR       shift and go to state 107


state 77

    (35) clist -> empty .

    RSQUAREBR       reduce using rule 35 (clist -> empty .)
    RPAREN          reduce using rule 35 (clist -> empty .)


state 78

    (36) clist -> expr .
    (37) clist -> expr . COMMA clist
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    RSQUAREBR       reduce using rule 36 (clist -> expr .)
    RPAREN          reduce using rule 36 (clist -> expr .)
    COMMA           shift and go to state 108
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 79

    (56) expr -> ID .
    (57) expr -> ID . EQ expr
    (58) expr -> ID . LPAREN clist RPAREN

    COMMA           reduce using rule 56 (expr -> ID .)
    LSQUAREBR       reduce using rule 56 (expr -> ID .)
    QUESTION_MARK   reduce using rule 56 (expr -> ID .)
    PLUS            reduce using rule 56 (expr -> ID .)
    MINUS           reduce using rule 56 (expr -> ID .)
    TIMES           reduce using rule 56 (expr -> ID .)
    DIVIDE          reduce using rule 56 (expr -> ID .)
    GREATER_THAN    reduce using rule 56 (expr -> ID .)
    LESS_THAN       reduce using rule 56 (expr -> ID .)
    DOUBLE_EQ       reduce using rule 56 (expr -> ID .)
    GREATER_THAN_EQ reduce using rule 56 (expr -> ID .)
    LESS_THAN_EQ    reduce using rule 56 (expr -> ID .)
    NOT_EQ          reduce using rule 56 (expr -> ID .)
    AND             reduce using rule 56 (expr -> ID .)
    OR              reduce using rule 56 (expr -> ID .)
    RSQUAREBR       reduce using rule 56 (expr -> ID .)
    SEMI_COLON      reduce using rule 56 (expr -> ID .)
    FN              reduce using rule 56 (expr -> ID .)
    $end            reduce using rule 56 (expr -> ID .)
    RPAREN          reduce using rule 56 (expr -> ID .)
    COLON           reduce using rule 56 (expr -> ID .)
    DOUBLE_RSQUAREBR reduce using rule 56 (expr -> ID .)
    TO              reduce using rule 56 (expr -> ID .)
    EQ              shift and go to state 53
    LPAREN          shift and go to state 54


state 80

    (54) expr -> PLUS expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 54 (expr -> PLUS expr .)
    COMMA           reduce using rule 54 (expr -> PLUS expr .)
    RSQUAREBR       reduce using rule 54 (expr -> PLUS expr .)
    FN              reduce using rule 54 (expr -> PLUS expr .)
    $end            reduce using rule 54 (expr -> PLUS expr .)
    RPAREN          reduce using rule 54 (expr -> PLUS expr .)
    COLON           reduce using rule 54 (expr -> PLUS expr .)
    DOUBLE_RSQUAREBR reduce using rule 54 (expr -> PLUS expr .)
    TO              reduce using rule 54 (expr -> PLUS expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! PLUS            [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! NOT_EQ          [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! AND             [ reduce using rule 54 (expr -> PLUS expr .) ]
  ! OR              [ reduce using rule 54 (expr -> PLUS expr .) ]


state 81

    (55) expr -> MINUS expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 55 (expr -> MINUS expr .)
    COMMA           reduce using rule 55 (expr -> MINUS expr .)
    RSQUAREBR       reduce using rule 55 (expr -> MINUS expr .)
    FN              reduce using rule 55 (expr -> MINUS expr .)
    $end            reduce using rule 55 (expr -> MINUS expr .)
    RPAREN          reduce using rule 55 (expr -> MINUS expr .)
    COLON           reduce using rule 55 (expr -> MINUS expr .)
    DOUBLE_RSQUAREBR reduce using rule 55 (expr -> MINUS expr .)
    TO              reduce using rule 55 (expr -> MINUS expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! PLUS            [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! NOT_EQ          [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! AND             [ reduce using rule 55 (expr -> MINUS expr .) ]
  ! OR              [ reduce using rule 55 (expr -> MINUS expr .) ]


state 82

    (53) expr -> NOT expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 53 (expr -> NOT expr .)
    COMMA           reduce using rule 53 (expr -> NOT expr .)
    RSQUAREBR       reduce using rule 53 (expr -> NOT expr .)
    FN              reduce using rule 53 (expr -> NOT expr .)
    $end            reduce using rule 53 (expr -> NOT expr .)
    RPAREN          reduce using rule 53 (expr -> NOT expr .)
    COLON           reduce using rule 53 (expr -> NOT expr .)
    DOUBLE_RSQUAREBR reduce using rule 53 (expr -> NOT expr .)
    TO              reduce using rule 53 (expr -> NOT expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 53 (expr -> NOT expr .) ]
  ! QUESTION_MARK   [ reduce using rule 53 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 53 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 53 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 53 (expr -> NOT expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 53 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 53 (expr -> NOT expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 53 (expr -> NOT expr .) ]
  ! NOT_EQ          [ reduce using rule 53 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 53 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 53 (expr -> NOT expr .) ]


state 83

    (21) single_if -> IF DOUBLE_LSQUAREBR . expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> IF DOUBLE_LSQUAREBR . expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 109

state 84

    (17) while_loop -> WHILE LPAREN . expr RPAREN stmt
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 110

state 85

    (18) for_loop -> FOR LPAREN . ID EQ expr TO expr RPAREN stmt

    ID              shift and go to state 111


state 86

    (19) do_while -> DO stmt . WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR

    WHILE           shift and go to state 112


state 87

    (16) return_is -> RETURN expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    SEMI_COLON      reduce using rule 16 (return_is -> RETURN expr .)
    FN              reduce using rule 16 (return_is -> RETURN expr .)
    $end            reduce using rule 16 (return_is -> RETURN expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 88

    (20) block -> BEGIN body . END

    END             shift and go to state 113


state 89

    (31) func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is .

    FN              reduce using rule 31 (func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is .)
    $end            reduce using rule 31 (func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is .)
    SEMI_COLON      reduce using rule 31 (func -> FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is .)


state 90

    (57) expr -> ID EQ expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 57 (expr -> ID EQ expr .)
    COMMA           reduce using rule 57 (expr -> ID EQ expr .)
    RSQUAREBR       reduce using rule 57 (expr -> ID EQ expr .)
    FN              reduce using rule 57 (expr -> ID EQ expr .)
    $end            reduce using rule 57 (expr -> ID EQ expr .)
    RPAREN          reduce using rule 57 (expr -> ID EQ expr .)
    COLON           reduce using rule 57 (expr -> ID EQ expr .)
    DOUBLE_RSQUAREBR reduce using rule 57 (expr -> ID EQ expr .)
    TO              reduce using rule 57 (expr -> ID EQ expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! QUESTION_MARK   [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! PLUS            [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! AND             [ reduce using rule 57 (expr -> ID EQ expr .) ]
  ! OR              [ reduce using rule 57 (expr -> ID EQ expr .) ]


state 91

    (58) expr -> ID LPAREN clist . RPAREN

    RPAREN          shift and go to state 114


state 92

    (23) defvar -> ID DBL_COLON type .
    (24) defvar -> ID DBL_COLON type . EQ expr

    SEMI_COLON      reduce using rule 23 (defvar -> ID DBL_COLON type .)
    EQ              shift and go to state 115


state 93

    (38) expr -> expr LSQUAREBR expr . RSQUAREBR
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    RSQUAREBR       shift and go to state 116
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 94

    (40) expr -> expr QUESTION_MARK expr . COLON expr
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    COLON           shift and go to state 117
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 95

    (41) expr -> expr PLUS expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 41 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 41 (expr -> expr PLUS expr .)
    RSQUAREBR       reduce using rule 41 (expr -> expr PLUS expr .)
    FN              reduce using rule 41 (expr -> expr PLUS expr .)
    $end            reduce using rule 41 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 41 (expr -> expr PLUS expr .)
    COLON           reduce using rule 41 (expr -> expr PLUS expr .)
    DOUBLE_RSQUAREBR reduce using rule 41 (expr -> expr PLUS expr .)
    TO              reduce using rule 41 (expr -> expr PLUS expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! PLUS            [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! NOT_EQ          [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 41 (expr -> expr PLUS expr .) ]


state 96

    (42) expr -> expr MINUS expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 42 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 42 (expr -> expr MINUS expr .)
    RSQUAREBR       reduce using rule 42 (expr -> expr MINUS expr .)
    FN              reduce using rule 42 (expr -> expr MINUS expr .)
    $end            reduce using rule 42 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 42 (expr -> expr MINUS expr .)
    COLON           reduce using rule 42 (expr -> expr MINUS expr .)
    DOUBLE_RSQUAREBR reduce using rule 42 (expr -> expr MINUS expr .)
    TO              reduce using rule 42 (expr -> expr MINUS expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! PLUS            [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! NOT_EQ          [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 42 (expr -> expr MINUS expr .) ]


state 97

    (43) expr -> expr TIMES expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 43 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 43 (expr -> expr TIMES expr .)
    RSQUAREBR       reduce using rule 43 (expr -> expr TIMES expr .)
    FN              reduce using rule 43 (expr -> expr TIMES expr .)
    $end            reduce using rule 43 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 43 (expr -> expr TIMES expr .)
    COLON           reduce using rule 43 (expr -> expr TIMES expr .)
    DOUBLE_RSQUAREBR reduce using rule 43 (expr -> expr TIMES expr .)
    TO              reduce using rule 43 (expr -> expr TIMES expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! QUESTION_MARK   [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! PLUS            [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! NOT_EQ          [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 43 (expr -> expr TIMES expr .) ]


state 98

    (44) expr -> expr DIVIDE expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 44 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 44 (expr -> expr DIVIDE expr .)
    RSQUAREBR       reduce using rule 44 (expr -> expr DIVIDE expr .)
    FN              reduce using rule 44 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 44 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 44 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 44 (expr -> expr DIVIDE expr .)
    DOUBLE_RSQUAREBR reduce using rule 44 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 44 (expr -> expr DIVIDE expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! QUESTION_MARK   [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! NOT_EQ          [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 44 (expr -> expr DIVIDE expr .) ]


state 99

    (45) expr -> expr GREATER_THAN expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    RSQUAREBR       reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    FN              reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    $end            reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    COLON           reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    DOUBLE_RSQUAREBR reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    TO              reduce using rule 45 (expr -> expr GREATER_THAN expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! QUESTION_MARK   [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! NOT_EQ          [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 45 (expr -> expr GREATER_THAN expr .) ]


state 100

    (46) expr -> expr LESS_THAN expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 46 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 46 (expr -> expr LESS_THAN expr .)
    RSQUAREBR       reduce using rule 46 (expr -> expr LESS_THAN expr .)
    FN              reduce using rule 46 (expr -> expr LESS_THAN expr .)
    $end            reduce using rule 46 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 46 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 46 (expr -> expr LESS_THAN expr .)
    DOUBLE_RSQUAREBR reduce using rule 46 (expr -> expr LESS_THAN expr .)
    TO              reduce using rule 46 (expr -> expr LESS_THAN expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! QUESTION_MARK   [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! NOT_EQ          [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 46 (expr -> expr LESS_THAN expr .) ]


state 101

    (47) expr -> expr DOUBLE_EQ expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    COMMA           reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    RSQUAREBR       reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    FN              reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    $end            reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    RPAREN          reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    COLON           reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    DOUBLE_RSQUAREBR reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    TO              reduce using rule 47 (expr -> expr DOUBLE_EQ expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! QUESTION_MARK   [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! PLUS            [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! AND             [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]
  ! OR              [ reduce using rule 47 (expr -> expr DOUBLE_EQ expr .) ]


state 102

    (48) expr -> expr GREATER_THAN_EQ expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    COMMA           reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    RSQUAREBR       reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    FN              reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    $end            reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    RPAREN          reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    COLON           reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    DOUBLE_RSQUAREBR reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    TO              reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! QUESTION_MARK   [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! PLUS            [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! TIMES           [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! AND             [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]
  ! OR              [ reduce using rule 48 (expr -> expr GREATER_THAN_EQ expr .) ]


state 103

    (49) expr -> expr LESS_THAN_EQ expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    COMMA           reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    RSQUAREBR       reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    FN              reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    $end            reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    RPAREN          reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    COLON           reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    DOUBLE_RSQUAREBR reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    TO              reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! QUESTION_MARK   [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! PLUS            [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! TIMES           [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! AND             [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]
  ! OR              [ reduce using rule 49 (expr -> expr LESS_THAN_EQ expr .) ]


state 104

    (50) expr -> expr NOT_EQ expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 50 (expr -> expr NOT_EQ expr .)
    COMMA           reduce using rule 50 (expr -> expr NOT_EQ expr .)
    RSQUAREBR       reduce using rule 50 (expr -> expr NOT_EQ expr .)
    FN              reduce using rule 50 (expr -> expr NOT_EQ expr .)
    $end            reduce using rule 50 (expr -> expr NOT_EQ expr .)
    RPAREN          reduce using rule 50 (expr -> expr NOT_EQ expr .)
    COLON           reduce using rule 50 (expr -> expr NOT_EQ expr .)
    DOUBLE_RSQUAREBR reduce using rule 50 (expr -> expr NOT_EQ expr .)
    TO              reduce using rule 50 (expr -> expr NOT_EQ expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! QUESTION_MARK   [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! PLUS            [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! TIMES           [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! AND             [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]
  ! OR              [ reduce using rule 50 (expr -> expr NOT_EQ expr .) ]


state 105

    (51) expr -> expr AND expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 51 (expr -> expr AND expr .)
    COMMA           reduce using rule 51 (expr -> expr AND expr .)
    RSQUAREBR       reduce using rule 51 (expr -> expr AND expr .)
    FN              reduce using rule 51 (expr -> expr AND expr .)
    $end            reduce using rule 51 (expr -> expr AND expr .)
    RPAREN          reduce using rule 51 (expr -> expr AND expr .)
    COLON           reduce using rule 51 (expr -> expr AND expr .)
    DOUBLE_RSQUAREBR reduce using rule 51 (expr -> expr AND expr .)
    TO              reduce using rule 51 (expr -> expr AND expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! QUESTION_MARK   [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! NOT_EQ          [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 51 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 51 (expr -> expr AND expr .) ]


state 106

    (52) expr -> expr OR expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 52 (expr -> expr OR expr .)
    COMMA           reduce using rule 52 (expr -> expr OR expr .)
    RSQUAREBR       reduce using rule 52 (expr -> expr OR expr .)
    FN              reduce using rule 52 (expr -> expr OR expr .)
    $end            reduce using rule 52 (expr -> expr OR expr .)
    RPAREN          reduce using rule 52 (expr -> expr OR expr .)
    COLON           reduce using rule 52 (expr -> expr OR expr .)
    DOUBLE_RSQUAREBR reduce using rule 52 (expr -> expr OR expr .)
    TO              reduce using rule 52 (expr -> expr OR expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! QUESTION_MARK   [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! NOT_EQ          [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 52 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 52 (expr -> expr OR expr .) ]


state 107

    (39) expr -> LSQUAREBR clist RSQUAREBR .

    SEMI_COLON      reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    LSQUAREBR       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    QUESTION_MARK   reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    PLUS            reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    MINUS           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    TIMES           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    DIVIDE          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN    reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    DOUBLE_EQ       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN_EQ reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN_EQ    reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    NOT_EQ          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    AND             reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    OR              reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    COMMA           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    RSQUAREBR       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    FN              reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    $end            reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    RPAREN          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    COLON           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    DOUBLE_RSQUAREBR reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    TO              reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)


state 108

    (37) clist -> expr COMMA . clist
    (35) clist -> . empty
    (36) clist -> . expr
    (37) clist -> . expr COMMA clist
    (3) empty -> .
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    RSQUAREBR       reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 78
    clist                          shift and go to state 118
    empty                          shift and go to state 77

state 109

    (21) single_if -> IF DOUBLE_LSQUAREBR expr . DOUBLE_RSQUAREBR stmt
    (22) else_if -> IF DOUBLE_LSQUAREBR expr . DOUBLE_RSQUAREBR stmt ELSE stmt
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    DOUBLE_RSQUAREBR shift and go to state 119
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 110

    (17) while_loop -> WHILE LPAREN expr . RPAREN stmt
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    RPAREN          shift and go to state 120
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 111

    (18) for_loop -> FOR LPAREN ID . EQ expr TO expr RPAREN stmt

    EQ              shift and go to state 121


state 112

    (19) do_while -> DO stmt WHILE . DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR

    DOUBLE_LSQUAREBR shift and go to state 122


state 113

    (20) block -> BEGIN body END .

    LSQUAREBR       reduce using rule 20 (block -> BEGIN body END .)
    NOT             reduce using rule 20 (block -> BEGIN body END .)
    PLUS            reduce using rule 20 (block -> BEGIN body END .)
    MINUS           reduce using rule 20 (block -> BEGIN body END .)
    ID              reduce using rule 20 (block -> BEGIN body END .)
    NUMBER          reduce using rule 20 (block -> BEGIN body END .)
    STRING          reduce using rule 20 (block -> BEGIN body END .)
    FN              reduce using rule 20 (block -> BEGIN body END .)
    IF              reduce using rule 20 (block -> BEGIN body END .)
    WHILE           reduce using rule 20 (block -> BEGIN body END .)
    FOR             reduce using rule 20 (block -> BEGIN body END .)
    DO              reduce using rule 20 (block -> BEGIN body END .)
    RETURN          reduce using rule 20 (block -> BEGIN body END .)
    BEGIN           reduce using rule 20 (block -> BEGIN body END .)
    RCURLYEBR       reduce using rule 20 (block -> BEGIN body END .)
    END             reduce using rule 20 (block -> BEGIN body END .)
    ELSE            reduce using rule 20 (block -> BEGIN body END .)


state 114

    (58) expr -> ID LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    QUESTION_MARK   reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    PLUS            reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    MINUS           reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    TIMES           reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    DOUBLE_EQ       reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    GREATER_THAN_EQ reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    LESS_THAN_EQ    reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    NOT_EQ          reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    AND             reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    OR              reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    COMMA           reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    FN              reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    $end            reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    RPAREN          reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    COLON           reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    DOUBLE_RSQUAREBR reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)
    TO              reduce using rule 58 (expr -> ID LPAREN clist RPAREN .)


state 115

    (24) defvar -> ID DBL_COLON type EQ . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 123

state 116

    (38) expr -> expr LSQUAREBR expr RSQUAREBR .

    SEMI_COLON      reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LSQUAREBR       reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    QUESTION_MARK   reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PLUS            reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MINUS           reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TIMES           reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DIVIDE          reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN    reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN       reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DOUBLE_EQ       reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN_EQ reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN_EQ    reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    NOT_EQ          reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    AND             reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    OR              reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COMMA           reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RSQUAREBR       reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    FN              reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    $end            reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RPAREN          reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COLON           reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DOUBLE_RSQUAREBR reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TO              reduce using rule 38 (expr -> expr LSQUAREBR expr RSQUAREBR .)


state 117

    (40) expr -> expr QUESTION_MARK expr COLON . expr
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 124

state 118

    (37) clist -> expr COMMA clist .

    RSQUAREBR       reduce using rule 37 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 37 (clist -> expr COMMA clist .)


state 119

    (21) single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR . stmt
    (22) else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR . stmt ELSE stmt
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    expr                           shift and go to state 30
    stmt                           shift and go to state 125
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 120

    (17) while_loop -> WHILE LPAREN expr RPAREN . stmt
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    expr                           shift and go to state 30
    stmt                           shift and go to state 126
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 121

    (18) for_loop -> FOR LPAREN ID EQ . expr TO expr RPAREN stmt
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 127

state 122

    (19) do_while -> DO stmt WHILE DOUBLE_LSQUAREBR . expr DOUBLE_RSQUAREBR
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 128

state 123

    (24) defvar -> ID DBL_COLON type EQ expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    SEMI_COLON      reduce using rule 24 (defvar -> ID DBL_COLON type EQ expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 124

    (40) expr -> expr QUESTION_MARK expr COLON expr .
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQ resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI_COLON      reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    COMMA           reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    RSQUAREBR       reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    FN              reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    $end            reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    RPAREN          reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    COLON           reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    DOUBLE_RSQUAREBR reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    TO              reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .)
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! LSQUAREBR       [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! QUESTION_MARK   [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! GREATER_THAN    [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! LESS_THAN       [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! DOUBLE_EQ       [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! GREATER_THAN_EQ [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! LESS_THAN_EQ    [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! NOT_EQ          [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! AND             [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! OR              [ reduce using rule 40 (expr -> expr QUESTION_MARK expr COLON expr .) ]


state 125

    (21) single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .
    (22) else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    LSQUAREBR       reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    NOT             reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    PLUS            reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    MINUS           reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    ID              reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    NUMBER          reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    STRING          reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    FN              reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    IF              reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    WHILE           reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    FOR             reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    DO              reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    RETURN          reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    BEGIN           reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    RCURLYEBR       reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    END             reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .)
    ELSE            shift and go to state 129

  ! ELSE            [ reduce using rule 21 (single_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt .) ]


state 126

    (17) while_loop -> WHILE LPAREN expr RPAREN stmt .

    LSQUAREBR       reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    ID              reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    FN              reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    DO              reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    BEGIN           reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    RCURLYEBR       reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    END             reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 17 (while_loop -> WHILE LPAREN expr RPAREN stmt .)


state 127

    (18) for_loop -> FOR LPAREN ID EQ expr . TO expr RPAREN stmt
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    TO              shift and go to state 130
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 128

    (19) do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr . DOUBLE_RSQUAREBR
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    DOUBLE_RSQUAREBR shift and go to state 131
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 129

    (22) else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE . stmt
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    expr                           shift and go to state 30
    stmt                           shift and go to state 132
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 130

    (18) for_loop -> FOR LPAREN ID EQ expr TO . expr RPAREN stmt
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 79
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45

    expr                           shift and go to state 133

state 131

    (19) do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .

    LSQUAREBR       reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    NOT             reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    PLUS            reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    MINUS           reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    ID              reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    NUMBER          reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    STRING          reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    FN              reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    IF              reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    WHILE           reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    FOR             reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    DO              reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    RETURN          reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    BEGIN           reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    RCURLYEBR       reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    END             reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)
    ELSE            reduce using rule 19 (do_while -> DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR .)


state 132

    (22) else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .

    LSQUAREBR       reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    NOT             reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    PLUS            reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    MINUS           reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    ID              reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    NUMBER          reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    STRING          reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    FN              reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    IF              reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    WHILE           reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    FOR             reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    DO              reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    RETURN          reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    BEGIN           reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    RCURLYEBR       reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    END             reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)
    ELSE            reduce using rule 22 (else_if -> IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt .)


state 133

    (18) for_loop -> FOR LPAREN ID EQ expr TO expr . RPAREN stmt
    (38) expr -> expr . LSQUAREBR expr RSQUAREBR
    (40) expr -> expr . QUESTION_MARK expr COLON expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIVIDE expr
    (45) expr -> expr . GREATER_THAN expr
    (46) expr -> expr . LESS_THAN expr
    (47) expr -> expr . DOUBLE_EQ expr
    (48) expr -> expr . GREATER_THAN_EQ expr
    (49) expr -> expr . LESS_THAN_EQ expr
    (50) expr -> expr . NOT_EQ expr
    (51) expr -> expr . AND expr
    (52) expr -> expr . OR expr

    RPAREN          shift and go to state 134
    LSQUAREBR       shift and go to state 59
    QUESTION_MARK   shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    GREATER_THAN    shift and go to state 65
    LESS_THAN       shift and go to state 66
    DOUBLE_EQ       shift and go to state 67
    GREATER_THAN_EQ shift and go to state 68
    LESS_THAN_EQ    shift and go to state 69
    NOT_EQ          shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72


state 134

    (18) for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN . stmt
    (4) stmt -> . expr SEMI_COLON
    (5) stmt -> . defvar SEMI_COLON
    (6) stmt -> . func SEMI_COLON
    (7) stmt -> . single_if
    (8) stmt -> . else_if
    (9) stmt -> . while_loop
    (10) stmt -> . for_loop
    (11) stmt -> . do_while
    (12) stmt -> . return_is SEMI_COLON
    (13) stmt -> . block
    (38) expr -> . expr LSQUAREBR expr RSQUAREBR
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . expr QUESTION_MARK expr COLON expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIVIDE expr
    (45) expr -> . expr GREATER_THAN expr
    (46) expr -> . expr LESS_THAN expr
    (47) expr -> . expr DOUBLE_EQ expr
    (48) expr -> . expr GREATER_THAN_EQ expr
    (49) expr -> . expr LESS_THAN_EQ expr
    (50) expr -> . expr NOT_EQ expr
    (51) expr -> . expr AND expr
    (52) expr -> . expr OR expr
    (53) expr -> . NOT expr
    (54) expr -> . PLUS expr
    (55) expr -> . MINUS expr
    (56) expr -> . ID
    (57) expr -> . ID EQ expr
    (58) expr -> . ID LPAREN clist RPAREN
    (59) expr -> . NUMBER
    (60) expr -> . STRING
    (23) defvar -> . ID DBL_COLON type
    (24) defvar -> . ID DBL_COLON type EQ expr
    (30) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYEBR body RCURLYEBR
    (31) func -> . FN ID LPAREN flist RPAREN LESS_THAN type GREATER_THAN EQ GREATER_THAN return_is
    (21) single_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt
    (22) else_if -> . IF DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR stmt ELSE stmt
    (17) while_loop -> . WHILE LPAREN expr RPAREN stmt
    (18) for_loop -> . FOR LPAREN ID EQ expr TO expr RPAREN stmt
    (19) do_while -> . DO stmt WHILE DOUBLE_LSQUAREBR expr DOUBLE_RSQUAREBR
    (16) return_is -> . RETURN expr
    (20) block -> . BEGIN body END

    LSQUAREBR       shift and go to state 40
    NOT             shift and go to state 43
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    ID              shift and go to state 26
    NUMBER          shift and go to state 44
    STRING          shift and go to state 45
    FN              shift and go to state 4
    IF              shift and go to state 46
    WHILE           shift and go to state 47
    FOR             shift and go to state 48
    DO              shift and go to state 49
    RETURN          shift and go to state 50
    BEGIN           shift and go to state 51

    expr                           shift and go to state 30
    stmt                           shift and go to state 135
    defvar                         shift and go to state 31
    func                           shift and go to state 32
    single_if                      shift and go to state 33
    else_if                        shift and go to state 34
    while_loop                     shift and go to state 35
    for_loop                       shift and go to state 36
    do_while                       shift and go to state 37
    return_is                      shift and go to state 38
    block                          shift and go to state 39

state 135

    (18) for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .

    LSQUAREBR       reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    NOT             reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    ID              reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    STRING          reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    FN              reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    IF              reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    FOR             reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    DO              reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    BEGIN           reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    RCURLYEBR       reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    END             reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 18 (for_loop -> FOR LPAREN ID EQ expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQUAREBR in state 80 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 80 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 81 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 81 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 82 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 82 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 90 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 90 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 95 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 95 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 96 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 96 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 97 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 97 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 98 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 99 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 99 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 100 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 100 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 101 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 101 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 102 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 102 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 103 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 103 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 104 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 104 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 105 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 105 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 106 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 106 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 124 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 124 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 125 resolved as shift
